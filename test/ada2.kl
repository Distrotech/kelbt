/*
 * This test grammar defived from the final project of Steve Hanov, Forrest
 * Payton and Adrian Thurston for the course CS444: Introduction to Compiler
 * Construction at the University of Waterloo. Ported and stripped down to work
 * with keller.
 *
 * Jan 2003
 * Ada/CS grammar
 *
 * Steve Hanov
 * Forrest Payton
 * Adrian Thurston
 *
 * Notes:
 *   - raise statements take ID's, not string literals
 *   - prag statements take ID's, not string literals
 *   - functions may take string literals
 *   - there is no character type, only string literals
 *   - The $ opperator (EOF) is not included
 *   - names may refer to values or locations
 *   - choice lists may include multiple "others" in any order
 *
 * The grammer is headed by the production start: ...
 *
 * Table of contents:
 *  PROGRAM CONSTRUCTION
 *    Package Specification
 *      specification and body options
 *      private options and declarations
 *      exceptions handler
 *  DECLARATION
 *    Decleration Statements
 *      object declaration (<id>, <id> : <type>;)
 *      type declaration
 *        record
 *        array
 *        enumeration
 *        access
 *      subtype declaration
 *      sub program declaration
 *  STATEMENTS
 *    prag
 *    null
 *    assign
 *    call
 *    read
 *    write
 *    block
 *    loops
 *    if
 *    exit
 *    return
 *    case
 *    raise
 *  EXPRESSIONS
 *    logical
 *    relational
 *    addition
 *    unary sign
 *    multiplication
 *    unary abs, not and **
 *    factors
 *    Name
 *      simple name
 *      name sufficies
 *      parameters
 *    Aggeragate sufficies
 *    Ranges
 *      discrete ranges
 *      subtype definitions
 *      constraints (range and index)
 *    Literals
 */

#include <iostream>
#include <string>
#include <stdlib.h>

using namespace std;
using std::cout;
using std::cerr;
using std::endl;

//#define LOG_ACTIONS

struct Token { };
struct LangEl;

struct Parser
{
	%%{

	parser Parser;

	token error;

	## -- C declarations -- #
	##--------------------------------------------------#

	# identifies seperate compilation
	token		kw_separate;

	# identifier
	token		ID;

	# compiler directive
	token		kw_pragma;

	token		kw_package;
	token		kw_private;
	token		kw_body;

	token		kw_procedure;
	token		kw_function;
	token		kw_return;
	token		kw_in;
	token		kw_out;

	token		kw_begin;
	token		kw_exception;
	token		kw_raise;
	token		kw_end;


	token		kw_declare;
	token		kw_constant;
	token		kw_use;

	token		kw_type;
	token		kw_is;
	token		kw_access;
	token		kw_record;

	token		kw_array;
	token		kw_of;

	token		kw_subtype;
	token		kw_range;

	token		kw_if;
	token		kw_then;
	token		kw_else;
	token		kw_elsif;

	token		kw_case;
	token		kw_when;
	token		kw_others;

	token		kw_for;
	token		kw_loop;
	token		kw_while;
	token		kw_exit;
	token		kw_reverse;


	token		kw_abs;
	token		kw_and;
	token		kw_mod;
	token		kw_not;
	token		kw_or;

	token		kw_null;

	# new keywords
	token		kw_new;
	token		kw_all;
	token		kw_read;
	token		kw_write;
	token		kw_next;
	token		kw_assign;

	token		kw_true;
	token		kw_false;

	token		lit_integer;
	token		lit_float;
	token		lit_string;

	token		op_field_qualification;	# . 
	token		op_left_bracket;	# (
	token		op_right_bracket;	# )

	token		op_exponentiation;	# **

	token		op_mult;	# *
	token		op_div;	# /

	token		op_plus;	# +
	token		op_minus;	# -
	token		op_cat;	# &

	token		op_eq;	# =
	token		op_neq;	# /=
	token		op_lt;	# <
	token		op_lteq;	# <=
	token		op_gt;	# >
	token		op_gteq;	# >=

	token		op_assign;	# :=

	token		de_single_quote;	# '
	token		de_dot_dot;	# ..
	token		de_colon;	# :
	token		de_comma;	# ,
	token		de_pipe;	# |
	token		de_arrow;	# =>
	token		de_unconstrained;	# <>
	token		de_semicolon;	# ;
	
	}%%

	%% write instance_data;

	void init();
	int parseLangEl( int type, const Token &tokenRef );
	void finish();
};

%% write token_defs;

%%{

parser Parser;

#--------------------------------------------------

# -- Grammer rules -- 

# ==========>>>> START <<<<==========
start: input try {
	cout << "start = input;" << endl; 
};

# start of program
input: compilation prag_list try {
	cout << "input = compilation prag_list;" << endl;
};

# ==============================================================
# ================= BEGIN PROGRAM CONSTRUCTION =================

# a compilation is a list of packages with optional compiler directives
compilation: prag_list kw_package p_spec_or_body try {
	cout << "compilation = prag_list kw_package p_spec_or_body;" << endl;
};
compilation: compilation prag_list kw_package p_spec_or_body try {
	cout << "compilation = compilation prag_list kw_package p_spec_or_body;" << endl;
};

# pragma list 0+
prag_list: prag_list prag_st try { cout << "prag_list = prag_list prag_st;" << endl; };
prag_list: try { cout << "prag_list = ;" << endl; };

# Package ID. Used to capture the package id into the scope for the package.
package_ID: ID try { cout << "package_ID = ID;" << endl; };

# component pieces of a packege
# HEADER or FULL
# <id> is [<use>]
#   <spec_dec>
#   <optional private>
#   <optional body>
# end [<id>];
p_spec_or_body: package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon try {
	cout << "p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;" << endl;
};

# error
p_spec_or_body: package_ID kw_is error kw_end id_option de_semicolon try {
	cout << "p_spec_or_body = package_ID kw_is error kw_end id_option de_semicolon;" << endl;
};
p_spec_or_body: package_ID kw_is error kw_end try {
	cout << "p_spec_or_body = package_ID kw_is error kw_end;" << endl;
};


#steve: Need a form: "package body A is separate;"
p_spec_or_body: kw_body package_ID kw_is kw_separate de_semicolon try {
	cout << "p_spec_or_body = kw_body package_ID kw_is kw_separate de_semicolon;" << endl;
};

# optional body with use (as there is a declaration section
body_opt: try {
	cout << "body_opt = ;" << endl;
};
body_opt: kw_body use_opt body_dec_list kw_begin stmt_list exception_opt try {
	cout << "body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;" << endl;
};

# optional statements
body_opt: kw_body use_opt body_dec_list exception_opt try {
	cout << "body_opt = kw_body use_opt body_dec_list exception_opt;" << endl;
};

# error
body_opt: kw_body error try {
	cout << "body_opt = kw_body error;" << endl;
};

# COMPLIMENT to HEADER
# body <id> is [<use>]
#   <declarations>
# begin
#   <statements>
#   [<exceptions>]
# end  [<id>];
p_spec_or_body: kw_body package_ID kw_is use_opt body_dec_list kw_begin stmt_list exception_opt kw_end id_option de_semicolon try {
	cout << "p_spec_or_body = kw_body package_ID kw_is use_opt body_dec_list kw_begin stmt_list exception_opt kw_end id_option de_semicolon;" << endl;
};
p_spec_or_body: kw_body package_ID kw_is use_opt body_dec_list exception_opt kw_end id_option de_semicolon try {
	cout << "p_spec_or_body = kw_body package_ID kw_is use_opt body_dec_list exception_opt kw_end id_option de_semicolon;" << endl;
};

# error
p_spec_or_body: kw_body package_ID kw_is error kw_end id_option de_semicolon try {
	cout << "p_spec_or_body = kw_body package_ID kw_is error kw_end id_option de_semicolon;" << endl;
};
p_spec_or_body: kw_body package_ID kw_is error kw_end try {
	cout << "p_spec_or_body = kw_body package_ID kw_is error kw_end;" << endl;
};

# the use statement option
use_opt: try { cout << "use_opt = ;" << endl; };
use_opt: kw_use id_list de_semicolon try { cout << "use_opt = kw_use id_list de_semicolon;" << endl; };


# optional exception section

#exceptions_opt = ;
#exceptions_opt = exceptions;

# optional id (also ends blocks)
id_option: try { cout << "id_option = ;" << endl; };
id_option: ID try { cout << "id_option = ID;" << endl; };


# list of spec declarations
spec_dec_list: try { cout << "spec_dec_list = ;" << endl; };
spec_dec_list: spec_dec_list spec_dec try { cout << "spec_dec_list = spec_dec_list spec_dec;" << endl; };

# specification declaration section
spec_dec: kw_type ID kw_is kw_private de_semicolon try { cout << "spec_dec = kw_type ID kw_is kw_private de_semicolon;" << endl; };
spec_dec: dec_stmt try { cout << "spec_dec = dec_stmt;" << endl; };

# error
spec_dec: kw_type ID error de_semicolon try { cout << "spec_dec = kw_type ID error de_semicolon;" << endl; };

# -- begin private ---

# private part option
private_opt: try { cout << "private_opt = ;" << endl; };
private_opt: private_list try { cout << "private_opt = private_list;" << endl; };

# private [<use>] <list if items>
private_list: private_list private_item try { cout << "private_list = private_list private_item;" << endl; };
private_list: kw_private use_opt private_item try { cout << "private_list = kw_private use_opt private_item;" << endl; };



# items under private part of a packege
private_item: kw_subtype ID kw_is sub_type de_semicolon try {
	cout << "private_item = kw_subtype ID kw_is sub_type de_semicolon;" << endl;
};
private_item: kw_type ID kw_is type_def de_semicolon try {
	cout << "private_item = kw_type ID kw_is type_def de_semicolon;" << endl;
};
private_item: exception_dec_st try {
	cout << "private_item = exception_dec_st;" << endl;
};

# error
private_item: kw_subtype error de_semicolon try {
	cout << "private_item = kw_subtype error de_semicolon;" << endl;
};
private_item: kw_type error de_semicolon try {
	cout << "private_item = kw_type error de_semicolon;" << endl;
};

#added by steve for test39.ada
private_item: object_dec try {
	cout << "private_item = object_dec;" << endl;
};

# --- BEGINE EXCEPTION ---
# an exception statement

exceptions: kw_exception handler_list try {
	cout << "exceptions = kw_exception handler_list;" << endl;
};

# list of exception cases
handler_list: try { cout << "handler_list = ;" << endl; };
handler_list: handler_list kw_when hand_options try { cout << "handler_list = handler_list kw_when hand_options;" << endl; };

# <list of names or "others"> => <statements>
hand_options: kw_others de_arrow stmt_list try { cout << "hand_options = kw_others de_arrow stmt_list;" << endl; };
hand_options: h_name_list de_arrow stmt_list try { cout << "hand_options = h_name_list de_arrow stmt_list;" << endl; };


# list of names
h_name_list: name try { cout << "h_name_list = name;" << endl; };
h_name_list: h_name_list de_pipe name try { cout << "h_name_list = h_name_list de_pipe name;" << endl; };
# --- END EXCEPTIONS ---


# ================== END PROGRAM CONSTRUCTION ==================
# ==============================================================





# ==============================================================
# ===================== BEGIN DECLARATIONS =====================

# a list of declarations
body_dec_list: try { cout << "body_dec_list = ;" << endl; };
body_dec_list: body_dec_list body_dec_st try { cout << "body_dec_list = body_dec_list body_dec_st;" << endl; };

# the declaration statements
body_dec_st: sub_body_dec try { cout << "body_dec_st = sub_body_dec;" << endl; };
body_dec_st: dec_stmt try { cout << "body_dec_st = dec_stmt;" << endl; };

# ----------------------------------------------
# ----------------------------------------------
# Set of declaration statements
dec_stmt: object_dec try { cout << "dec_stmt = object_dec;" << endl; };
dec_stmt: type_dec_st try { cout << "dec_stmt = type_dec_st;" << endl; };
dec_stmt: exception_dec_st try { cout << "dec_stmt = exception_dec_st;" << endl; };
dec_stmt: sub_dec_st try { cout << "dec_stmt = sub_dec_st;" << endl; };
dec_stmt: prag_st try { cout << "dec_stmt = prag_st;" << endl; };
dec_stmt: sub_pro_dec_st try { cout << "dec_stmt = sub_pro_dec_st;" << endl; };
# ----------------------------------------------
# ----------------------------------------------


# Object declaration.  (id list with possible constant and init)
# object <id> {,<id>} : [constant] <type or subtype> [:= <expr>];
object_dec: id_list de_colon con_opt type_or_sub init_opt de_semicolon try {
	cout << "object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;" << endl;
};

# error
object_dec: id_list error de_semicolon try {
	cout << "object_dec = id_list error de_semicolon;" << endl;
};

# constant option
con_opt: try { cout << "con_opt = ;" << endl; };
con_opt: kw_constant try { cout << "con_opt = kw_constant;" << endl; };

# initialization option
init_opt: try { cout << "init_opt = ;" << endl; };
init_opt: op_assign expr try { cout << "init_opt = op_assign expr;" << endl;
};

exception_dec_st: id_list de_colon kw_exception de_semicolon try {
	cout << "exception_dec_st = id_list de_colon kw_exception de_semicolon;" << endl;
};

# --- BEGIN TYPE DEC ---------------------------
# type or sub choice
type_or_sub: typet try { cout << "type_or_sub = typet;" << endl; };
type_or_sub: sub_def try { cout << "type_or_sub = sub_def;" << endl; };

# Type name goes to ID. Non-terminal stores the idToken.
type_name: ID try { cout << "type_name = ID;" << endl; };


# allows disambiguating over scope.
typet: overld_resolve try { cout << "typet = overld_resolve;" << endl; };
typet: type_def try { cout << "typet = type_def;" << endl; };

overld_resolve: overld_resolve_more try { cout << "overld_resolve = overld_resolve_more;" << endl; };
overld_resolve_more: overld_resolve_more op_field_qualification ID try {
	cout << "overld_resolve_more = overld_resolve_more op_field_qualification ID;" << endl;
};
overld_resolve_more: ID try { cout << "overld_resolve_more = ID;" << endl; };

# 1+ list of identifiers
id_list: id_list_more try { cout << "id_list = id_list_more;" << endl; };
id_list_more: ID try { cout << "id_list_more = ID;" << endl; };
id_list_more: id_list_more de_comma ID try { cout << "id_list_more = id_list_more de_comma ID;" << endl; };

# complete or incomplete type declarations
type_dec_st: kw_type ID kw_is type_def de_semicolon try { cout << "type_dec_st = kw_type ID kw_is type_def de_semicolon;" << endl; };
type_dec_st: kw_type ID de_semicolon try { cout << "type_dec_st = kw_type ID de_semicolon;" << endl; };

# different type definitions
type_def: record_def try { cout << "type_def = record_def;" << endl; };
type_def: array_def try { cout << "type_def = array_def;" << endl; };
type_def: enum_def try { cout << "type_def = enum_def;" << endl; };
type_def: kw_access sub_type try { cout << "type_def = kw_access sub_type;" << endl; };

# -- begin record ------------
# the record
record_def: kw_record r_compon_list kw_end kw_record try {
	cout << "record_def = kw_record r_compon_list kw_end kw_record;" << endl;
};


# a list of recod elements
# null;, 1+ components or 0+ components and a varient
r_compon_list: null_st try { cout << "r_compon_list = null_st;" << endl; };
r_compon_list: r_components try { cout << "r_compon_list = r_components;" << endl; };

# list of components with at least one component or variant
# e.g. (component)*(component | variant)
# record component   <id list> : <typet>;
# record variant     case t : integer is {variant} end case;
r_components: id_list de_colon type_or_sub de_semicolon r_components try {
	cout << "r_components = id_list de_colon type_or_sub de_semicolon r_components;" << endl;
};
r_components: id_list de_colon type_or_sub de_semicolon try {
	cout << "r_components = id_list de_colon type_or_sub de_semicolon;" << endl;
};
r_components: kw_case ID de_colon type_name kw_is r_variant_list kw_end kw_case de_semicolon try {
	cout << "r_components = kw_case ID de_colon type_name kw_is r_variant_list kw_end kw_case de_semicolon;" << endl;
};

# list of 1+ variants
# variant: when <choice> => components
# Note: add_exp is a simple expression (less logical and relational-ish)
r_variant_list: kw_when add_exp de_arrow r_compon_list try {
	cout << "r_variant_list = kw_when add_exp de_arrow r_compon_list;" << endl;
};
r_variant_list: r_variant_list kw_when add_exp de_arrow r_compon_list try {
	cout << "r_variant_list = r_variant_list kw_when add_exp de_arrow r_compon_list;" << endl;
};
# -- end record --------------


# -- begin array ------------
# option of constrained or not
# array ( option list ) of <typet or subtype>
# --
array_def: kw_array op_left_bracket uncon_list op_right_bracket kw_of type_or_sub try {
	cout << "array_def = kw_array op_left_bracket uncon_list op_right_bracket kw_of type_or_sub;" << endl;
};
array_def: kw_array op_left_bracket con_list op_right_bracket kw_of type_or_sub try {
	cout << "array_def = kw_array op_left_bracket con_list op_right_bracket kw_of type_or_sub;" << endl;
};

# the unconstrained array
uncon_list: uncon_list de_comma index_sub try {
	cout << "uncon_list = uncon_list de_comma index_sub;" << endl;
};
uncon_list: index_sub try {
	cout << "uncon_list = index_sub;" << endl;
};

# index subtype definition
index_sub: type_name kw_range de_unconstrained try {
	cout << "index_sub = type_name kw_range de_unconstrained;" << endl;
};


# the constrained array
# Note: compensates for restriction of dis_range
con_list: con_list_more try { cout << "con_list = con_list_more;" << endl; };
con_list_more: con_list_more de_comma dis_range try { cout << "con_list_more = con_list_more de_comma dis_range;" << endl; };
con_list_more: dis_range try { cout << "con_list_more = dis_range;" << endl; };
# -- end array --------------

# -- begin enumeration ------------
# is an id list
enum_def: op_left_bracket id_list op_right_bracket try {
	cout << "enum_def = op_left_bracket id_list op_right_bracket;" << endl;
};

# -- end enumeration --------------
# --- END TYPE DEC ----------------

# Sub program body declaration.
sub_body_dec: sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon try {
	cout << "sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;" << endl;
};

# error
sub_body_dec: sub_pro_spec kw_is error kw_end id_opt de_semicolon try {
	cout << "sub_body_dec = sub_pro_spec kw_is error kw_end id_opt de_semicolon;" << endl;
};

# optional exception
exception_opt: try { cout << "exception_opt = ;" << endl; };
exception_opt: exceptions try { cout << "exception_opt = exceptions;" << endl; };

# optional id
id_opt: try { cout << "id_opt = ;" << endl; };
id_opt: ID try { cout << "id_opt = ID;" << endl; };
id_opt: lit_string try { cout << "id_opt = lit_string;" << endl; };


# sub program declaration
sub_pro_dec_st: sub_pro_spec de_semicolon try {
	cout << "sub_pro_dec_st = sub_pro_spec de_semicolon;" << endl;
};

# a sub program specification
# procedure or function
sub_pro_spec: kw_procedure proc_designator formal_opt try {
	cout << "sub_pro_spec = kw_procedure proc_designator formal_opt;" << endl;
};
sub_pro_spec: kw_function func_designator formal_opt kw_return ID try {
	cout << "sub_pro_spec = kw_function func_designator formal_opt kw_return ID;" << endl;
};

# error
sub_pro_spec: kw_procedure error op_right_bracket try {
	cout << "sub_pro_spec = kw_procedure error op_right_bracket;" << endl;
};
sub_pro_spec: kw_function error ID try {
	cout << "sub_pro_spec = kw_function error ID;" << endl;
};

formal_opt: op_left_bracket param_dec_list op_right_bracket try {
	cout << "formal_opt = op_left_bracket param_dec_list op_right_bracket;" << endl;
};
formal_opt: try {
	cout << "formal_opt = ;" << endl;
};

# ---additional constructions for sub program declaration
# designator a name or opperator symbol in the form of a string literal
func_designator: ID try { cout << "func_designator = ID;" << endl; };
func_designator: lit_string try { cout << "func_designator = lit_string;" << endl; };
proc_designator: ID try { cout << "proc_designator = ID;" << endl; };

# list of semi delimited parameters
param_dec_list: param_dec_list de_semicolon param_dec try {
	cout << "param_dec_list = param_dec_list de_semicolon param_dec;" << endl;
};
param_dec_list: param_dec try {
	cout << "param_dec_list = param_dec;" << endl;
};

# a parameter
param_dec: id_list de_colon mode ID try {
	cout << "param_dec = id_list de_colon mode ID;" << endl;
};

# optional modes
mode: try { cout << "mode = ;" << endl; };
mode: kw_in try { cout << "mode = kw_in;" << endl; };
mode: kw_out try { cout << "mode = kw_out;" << endl; };
mode: kw_in kw_out try { cout << "mode = kw_in kw_out;" << endl; };
# -- end sub programs

# ====================== END DECLARATIONS ======================
# ==============================================================




# ==============================================================
# ====================== BEGIN STATEMENTS ======================

# a list of statments
stmt_list: stmt_star try { cout << "stmt_list = stmt_star;" << endl; };
stmt_star: try { cout << "stmt_star = ;" << endl; };
stmt_star: stmt_star statement try { cout << "stmt_star = stmt_star statement;" << endl; };


# --------------------------------------------------------------
# SET OF ALL STATEMENTS
# --------------------------------------------------------------

# PRAG:		pragma <id>;
# NULL:		null;
# ASSIGN:	<id> := <expr>;
# CALL:		<name>;
# BLOCK:	[declare ...] begin ... [exception ...] end;
# LOOP:		[while <expr> | for <id> in <range>] loop ... end loop;
# IF:		if <expr> then ... [elsif <expr> then ...][else ...] end if;
# EXIT:		exit <id> [when <expr>];
# RETURN:	
# CASE:		case <expr> is {when <choice list>: ...} end case;
# RAISE:	raise <id>;
# READ:
# WRITE:

statement: prag_st try { cout << "statement = prag_st;" << endl; };
statement: null_st try { cout << "statement = null_st;" << endl; };
statement: assign_st try { cout << "statement = assign_st;" << endl; };
statement: call_st try { cout << "statement = call_st;" << endl; };
statement: block_st try { cout << "statement = block_st;" << endl; };
statement: loop_st try { cout << "statement = loop_st;" << endl; };
statement: if_st try { cout << "statement = if_st;" << endl; };
statement: exit_st try { cout << "statement = exit_st;" << endl; };
statement: return_st try { cout << "statement = return_st;" << endl; };
statement: case_st try { cout << "statement = case_st;" << endl; };
statement: raise_st try { cout << "statement = raise_st;" << endl; };
statement: read_st try { cout << "statement = read_st;" << endl; };
statement: write_st try { cout << "statement = write_st;" << endl; };

# --------------------------------------------------------------
# --------------------------------------------------------------

# PRAGMA STATEMENT
prag_st: kw_pragma ID de_semicolon try { cout << "prag_st = kw_pragma ID de_semicolon;" << endl; };

# error
prag_st: kw_pragma error de_semicolon try { cout << "prag_st = kw_pragma error de_semicolon;" << endl; };

# NULL STATEMENT
null_st: kw_null de_semicolon try { cout << "null_st = kw_null de_semicolon;" << endl; };

# ASSIGNMENT
assign_st: name op_assign expr de_semicolon try { cout << "assign_st = name op_assign expr de_semicolon;" << endl; };

# error
assign_st: name op_assign error de_semicolon try { cout << "assign_st = name op_assign error de_semicolon;" << endl; };

# CALL STATEMENT
call_st: name de_semicolon try { cout << "call_st = name de_semicolon;" << endl; };

# error
call_st: ID error de_semicolon try { cout << "call_st = ID error de_semicolon;" << endl; };


# --- BEGIN READ ---
# Read statement
read_st: kw_read op_left_bracket r_name_list op_right_bracket de_semicolon try {
	cout << "read_st = kw_read op_left_bracket r_name_list op_right_bracket de_semicolon;" << endl;
};

# error
read_st: kw_read error op_right_bracket de_semicolon try {
	cout << "read_st = kw_read error op_right_bracket de_semicolon;" << endl;
};

# parameters to read (a name list)
r_name_list: r_name_list de_semicolon name try { cout << "r_name_list = r_name_list de_semicolon name;" << endl; };
r_name_list: r_name_list de_semicolon kw_next try { cout << "r_name_list = r_name_list de_semicolon kw_next;" << endl; };
r_name_list: name try { cout << "r_name_list = name;" << endl; };
r_name_list: kw_next try { cout << "r_name_list = kw_next;" << endl; };
# --- END READ ---



# --- BEGIN WRITE ---
# write statement
write_st: kw_write op_left_bracket w_name_list op_right_bracket de_semicolon try {
	cout << "write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;" << endl;
};

# error
write_st: kw_write error op_right_bracket de_semicolon try {
	cout << "write_st = kw_write error op_right_bracket de_semicolon;" << endl;
};

# parameters of write
w_name_list: w_name_list de_semicolon w_param try { cout << "w_name_list = w_name_list de_semicolon w_param;" << endl; };
w_name_list: w_param try { cout << "w_name_list = w_param;" << endl; };

# specific write parameter with optional length specification
# Write next or <name> or <name>,length
# Steve: Changed "name" to expr.
w_param: kw_next try { cout << "w_param = kw_next;" << endl; };
w_param: expr try { cout << "w_param = expr;" << endl; };
w_param: expr de_comma lit_integer try { cout << "w_param = expr de_comma lit_integer;" << endl; };
# --- END WRITE ---



# --- BEGIN BLOCK ---
# further block information is located above statements
# ---
# [<id> :][declare ...] begin ... [exception ...] end;
block_st: opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon try {
	cout << "block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;" << endl;
};
block_st: ID de_colon opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon try {
	cout << "block_st = ID de_colon opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;" << endl;
};

# error
block_st: opt_decl kw_begin error kw_end id_option de_semicolon try {
	cout << "block_st = opt_decl kw_begin error kw_end id_option de_semicolon;" << endl;
};
block_st: ID de_colon opt_decl kw_begin error kw_end id_option de_semicolon try {
	cout << "block_st = ID de_colon opt_decl kw_begin error kw_end id_option de_semicolon;" << endl;
};

# blocks may have a declaration section, possible empty
opt_decl: try { cout << "opt_decl = ;" << endl; };
opt_decl: kw_declare use_opt body_dec_list try { cout << "opt_decl = kw_declare use_opt body_dec_list;" << endl; };
# --- END BLOCK ---



# --- BEGIN LOOPS ---
# Loops include simple (loop) and advanved (for, while)
# ---
# Loop statements (with optional id:)
loop_st: loop_body try { cout << "loop_st = loop_body;" << endl; };
loop_st: ID de_colon loop_body try { cout << "loop_st = ID de_colon loop_body;" << endl; };

# optional front followed by the basic loop
loop_body: adv_loop stmt_list kw_end kw_loop de_semicolon try {
	cout << "loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;" << endl;
};

# error
loop_body: adv_loop error kw_end kw_loop de_semicolon try {
	cout << "loop_body = adv_loop error kw_end kw_loop de_semicolon;" << endl;
};
loop_body: adv_loop error kw_end kw_loop try {
	cout << "loop_body = adv_loop error kw_end kw_loop;" << endl;
};
loop_body: adv_loop error kw_end de_semicolon try {
	cout << "loop_body = adv_loop error kw_end de_semicolon;" << endl;
};

# advanced loop components
adv_loop: kw_loop try { cout << "adv_loop = kw_loop;" << endl; };
adv_loop: kw_while expr kw_loop try { cout << "adv_loop = kw_while expr kw_loop;" << endl; };
adv_loop: kw_for ID kw_in dis_range kw_loop try { cout << "adv_loop = kw_for ID kw_in dis_range kw_loop;" << endl; };
adv_loop: kw_for ID kw_in kw_reverse dis_range kw_loop try { cout << "adv_loop = kw_for ID kw_in kw_reverse dis_range kw_loop;" << endl; };

# error
adv_loop: kw_while error kw_loop try { cout << "adv_loop = kw_while error kw_loop;" << endl; };
adv_loop: kw_for error kw_loop try { cout << "adv_loop = kw_for error kw_loop;" << endl; };
# --- END LOOPS ---



# --- BEGIN IF ---
# If statement if <expr> then <stmts> <stuff>
if_st: kw_if expr kw_then stmt_list else_if try { cout << "if_st = kw_if expr kw_then stmt_list else_if;" << endl; };

# error
if_st: kw_if error kw_end kw_if de_semicolon try { cout << "if_st = kw_if error kw_end kw_if de_semicolon;" << endl; };
if_st: kw_if error kw_end kw_if try { cout << "if_st = kw_if error kw_end kw_if;" << endl; };

# Elsif lists
else_if: kw_elsif expr kw_then stmt_list else_if try { cout << "else_if = kw_elsif expr kw_then stmt_list else_if;" << endl; };
else_if: end_if try { cout << "else_if = end_if;" << endl; };

# optional else
end_if: kw_else stmt_list kw_end kw_if de_semicolon try { cout << "end_if = kw_else stmt_list kw_end kw_if de_semicolon;" << endl; };
end_if: kw_end kw_if de_semicolon try { cout << "end_if = kw_end kw_if de_semicolon;" << endl; };
# --- END IF ---



# --- BEGIN EXIT ---
# exit statment
# March 15: Steve changed exit <name> to exit <ID>
# cause it makes more sense.
exit_st: kw_exit de_semicolon try { cout << "exit_st = kw_exit de_semicolon;" << endl; };
exit_st: kw_exit ID de_semicolon try { cout << "exit_st = kw_exit ID de_semicolon;" << endl; };
exit_st: kw_exit kw_when expr de_semicolon try { cout << "exit_st = kw_exit kw_when expr de_semicolon;" << endl; };
exit_st: kw_exit ID kw_when expr de_semicolon try { cout << "exit_st = kw_exit ID kw_when expr de_semicolon;" << endl; };

# error
exit_st: kw_exit error de_semicolon try { cout << "exit_st = kw_exit error de_semicolon;" << endl; };
# --- END EXIT ---



# --- BEGIN RETURN ---
# Return statements
return_st: kw_return de_semicolon try { cout << "return_st = kw_return de_semicolon;" << endl; };
return_st: kw_return expr de_semicolon try { cout << "return_st = kw_return expr de_semicolon;" << endl; };

# error
return_st: kw_return error de_semicolon try { cout << "return_st = kw_return error de_semicolon;" << endl; };
# --- END RETURN ---



# --- BEGIN CASE ---
# consisting of the statment, a section of 0 or more when, 
# an optional other and choices build from expressions and ranges of expressions
# ---
# case statment
case_st: kw_case expr kw_is when_list others kw_end kw_case de_semicolon try {
	cout << "case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;" << endl;
};

# error 
case_st: kw_case error kw_end kw_case de_semicolon try {
	cout << "case_st = kw_case error kw_end kw_case de_semicolon;" << endl;
};
case_st: kw_case error kw_end kw_case try {
	cout << "case_st = kw_case error kw_end kw_case;" << endl;
};

# list of cases
when_list: try { cout << "when_list = ;" << endl; };
when_list: when_list kw_when choice_list de_arrow stmt_list try {
	cout << "when_list = when_list kw_when choice_list de_arrow stmt_list;" << endl;
};

# a list of choices
# choice | ... | choice => statements
choice_list: choice try { cout << "choice_list = choice;" << endl; };
choice_list: choice de_pipe choice_list try { cout << "choice_list = choice de_pipe choice_list;" << endl; };

# a choice is an expressions or a range
choice: expr try { cout << "choice = expr;" << endl; };
choice: add_exp de_dot_dot add_exp try { cout << "choice = add_exp de_dot_dot add_exp;" << endl; };

# optional others case
others: try { cout << "others = ;" << endl; };
others: kw_when kw_others de_arrow stmt_list try { cout << "others = kw_when kw_others de_arrow stmt_list;" << endl; };
# --- END CASE ---


# --- BEGIN RAISE ---
# the raise statement
raise_st: kw_raise name de_semicolon try { cout << "raise_st = kw_raise name de_semicolon;" << endl; };
# --- END RAISE ---

# ======================= END STATEMENTS =======================
# ==============================================================




# ==============================================================
# ====================== BEGIN EXPRESSION ======================

# --- BEGIN OPERATORS ---
# All expressions are described below with precidence
# ---
expr: log_exp try { cout << "expr = log_exp;" << endl; };

# logical operators
log_exp: log_exp kw_and rel_exp try { cout << "log_exp = log_exp kw_and rel_exp;" << endl; };
log_exp: log_exp kw_or rel_exp try { cout << "log_exp = log_exp kw_or rel_exp;" << endl; };
log_exp: log_exp kw_and kw_then rel_exp try { cout << "log_exp = log_exp kw_and kw_then rel_exp;" << endl; };
log_exp: log_exp kw_or kw_else rel_exp try { cout << "log_exp = log_exp kw_or kw_else rel_exp;" << endl; };
log_exp: rel_exp try { cout << "log_exp = rel_exp;" << endl; };

# nonassociative relational operators
rel_exp: add_exp op_eq add_exp try { cout << "rel_exp = add_exp op_eq add_exp;" << endl; };
rel_exp: add_exp op_neq add_exp try { cout << "rel_exp = add_exp op_neq add_exp;" << endl; };
rel_exp: add_exp op_lt add_exp try { cout << "rel_exp = add_exp op_lt add_exp;" << endl; };
rel_exp: add_exp op_lteq add_exp try { cout << "rel_exp = add_exp op_lteq add_exp;" << endl; };
rel_exp: add_exp op_gt add_exp try { cout << "rel_exp = add_exp op_gt add_exp;" << endl; };
rel_exp: add_exp op_gteq add_exp try { cout << "rel_exp = add_exp op_gteq add_exp;" << endl; };
rel_exp: add_exp try { cout << "rel_exp = add_exp;" << endl; };

# additive operators
add_exp: add_exp op_plus sign_exp try { cout << "add_exp = add_exp op_plus sign_exp;" << endl; };
add_exp: add_exp op_minus sign_exp try { cout << "add_exp = add_exp op_minus sign_exp;" << endl; };
add_exp: add_exp op_cat sign_exp try { cout << "add_exp = add_exp op_cat sign_exp;" << endl; };
add_exp: sign_exp try { cout << "add_exp = sign_exp;" << endl; };

# sign operators
sign_exp: mult_exp try { cout << "sign_exp = mult_exp;" << endl; };

# multiplicitive operators
mult_exp: mult_exp op_mult unary_exp try { cout << "mult_exp = mult_exp op_mult unary_exp;" << endl; };
mult_exp: mult_exp op_div unary_exp try { cout << "mult_exp = mult_exp op_div unary_exp;" << endl; };
mult_exp: mult_exp kw_mod unary_exp try { cout << "mult_exp = mult_exp kw_mod unary_exp;" << endl; };
mult_exp: unary_exp try { cout << "mult_exp = unary_exp;" << endl; };

# unary operators
unary_exp: kw_abs unary_exp try { cout << "unary_exp = kw_abs unary_exp;" << endl; };
unary_exp: kw_not unary_exp try { cout << "unary_exp = kw_not unary_exp;" << endl; };
unary_exp: op_plus unary_exp try { cout << "unary_exp = op_plus unary_exp;" << endl; };
unary_exp: op_minus unary_exp try { cout << "unary_exp = op_minus unary_exp;" << endl; };
unary_exp: factor_exp op_exponentiation factor_exp try { cout << "unary_exp = factor_exp op_exponentiation factor_exp;" << endl; };
unary_exp: factor_exp try { cout << "unary_exp = factor_exp;" << endl; };
# --- END OPERATORS ---


# lowest level, converts from literals
factor_exp: op_left_bracket expr op_right_bracket try { cout << "factor_exp = op_left_bracket expr op_right_bracket;" << endl; };
factor_exp: literal try { cout << "factor_exp = literal;" << endl; };
factor_exp: name_or_agg try { cout << "factor_exp = name_or_agg;" << endl; };
factor_exp: kw_new type_name try { cout << "factor_exp = kw_new type_name;" << endl; };




# --- NAME ---
# identifier
# identifier.identifier."string".identifier(<expr>)(<expr>)
# ---

# a simple or complex name may be ended in .all
name: ID try { cout << "name = ID;" << endl; };
name: ID n_sufx_list try { cout << "name = ID n_sufx_list;" << endl; };
name: ID op_field_qualification kw_all try { cout << "name = ID op_field_qualification kw_all;" << endl; };
name: ID n_sufx_list op_field_qualification kw_all try { cout << "name = ID n_sufx_list op_field_qualification kw_all;" << endl; };

# list of sufficies 0+
n_sufx_list: name_suffix try { cout << "n_sufx_list = name_suffix;" << endl; };
n_sufx_list: n_sufx_list name_suffix try { cout << "n_sufx_list = n_sufx_list name_suffix;" << endl; };

# -- array indexing and field qualifications
# prefix is a procedure was a procedure call
name_suffix: op_left_bracket params op_right_bracket try {
	cout << "name_suffix = op_left_bracket params op_right_bracket;" << endl;
};

# prefix is a quantifier (package, dec, record)
name_suffix: op_field_qualification ID try {
	cout << "name_suffix = op_field_qualification ID;" << endl;
};

# prefix is a quantifier
name_suffix: op_field_qualification lit_string try {
	cout << "name_suffix = op_field_qualification lit_string;" << endl;
};

# prefix is a typename OR
# prefix is an item if ID is a predefined function name
name_suffix: de_single_quote ID try { cout << "name_suffix = de_single_quote ID;" << endl; };

# one or more comma seperated expressions
params: params de_comma expr try { cout << "params = params de_comma expr;" << endl; };
params: expr try { cout << "params = expr;" << endl; };
# --- END NAME ---



# --- AGGEREGATES ---
# <name>
# <name> '( <expr>, ... ,<ae> | <dis range> | ... | others => <expr> )
# ---

# a name or a name with an aggregate suffix on the end
name_or_agg: ID opt_agg_suff try { cout << "name_or_agg = ID opt_agg_suff;" << endl; };
name_or_agg: ID n_sufx_list opt_agg_suff try { cout << "name_or_agg = ID n_sufx_list opt_agg_suff;" << endl; };
name_or_agg: ID op_field_qualification kw_all opt_agg_suff try { cout << "name_or_agg = ID op_field_qualification kw_all opt_agg_suff;" << endl; };
name_or_agg: ID n_sufx_list op_field_qualification kw_all opt_agg_suff try { cout << "name_or_agg = ID n_sufx_list op_field_qualification kw_all opt_agg_suff;" << endl; };

# optional aggregate suffix
opt_agg_suff: try { cout << "opt_agg_suff = ;" << endl; };
opt_agg_suff: agg_suffix try { cout << "opt_agg_suff = agg_suffix;" << endl; };

# the aggregate suffix
agg_suffix: de_single_quote op_left_bracket agg_list op_right_bracket try {
	cout << "agg_suffix = de_single_quote op_left_bracket agg_list op_right_bracket;" << endl;
};

# aggregate list T'(agg_list)
agg_list: agg_elem try { cout << "agg_list = agg_elem;" << endl; };
agg_list: agg_elem de_comma agg_list try { cout << "agg_list = agg_elem de_comma agg_list;" << endl; };

# aggeragate choice E or A=>E
agg_elem: expr try { cout << "agg_elem = expr;" << endl; };
agg_elem: agg_choices de_arrow expr try { cout << "agg_elem = agg_choices de_arrow expr;" << endl; };

# list of choices
agg_choices: agg_item try { cout << "agg_choices = agg_item;" << endl; };
agg_choices: agg_choices de_pipe agg_item try { cout << "agg_choices = agg_choices de_pipe agg_item;" << endl; };

# aggeragate items compose choices
agg_item: dis_range_or_add_exp try { cout << "agg_item = dis_range_or_add_exp;" << endl; };
agg_item: kw_others try { cout << "agg_item = kw_others;" << endl; };
# --- END AGGERAGATES ---



# --- SUBTYPE, RANGES and DISCREET RANGES ---


# subtype declaration ---
sub_dec_st: kw_subtype ID kw_is sub_type de_semicolon try {
	cout << "sub_dec_st = kw_subtype ID kw_is sub_type de_semicolon;" << endl;
};

# subtype (sub_def is used in expressions)
sub_type: type_name try { cout << "sub_type = type_name;" << endl; };
sub_type: sub_def try { cout << "sub_type = sub_def;" << endl; };

# a subtype with no index constraint (used by discrete range only)
sub_type_no_index: type_name try { cout << "sub_type_no_index = type_name;" << endl; };
sub_type_no_index: sub_def_range_const try { cout << "sub_type_no_index = sub_def_range_const;" << endl; };

# subtype definition
sub_def: sub_def_index_const try { cout << "sub_def = sub_def_index_const;" << endl; };
sub_def: sub_def_range_const try { cout << "sub_def = sub_def_range_const;" << endl; };

# subtype definition index constraint
# identifier ( <range> , ... <range> )
sub_def_index_const: type_name index_constraint try {
	cout << "sub_def_index_const = type_name index_constraint;" << endl;
};
index_constraint: op_left_bracket dis_range_list op_right_bracket try {
	cout << "index_constraint = op_left_bracket dis_range_list op_right_bracket;" << endl;
};

# subtype definition range constraint
# [identifier] range <ae> .. <ae>
sub_def_range_const: range_constraint try { cout << "sub_def_range_const = range_constraint;" << endl; };
sub_def_range_const: type_name range_constraint try { cout << "sub_def_range_const = type_name range_constraint;" << endl; };
range_constraint: kw_range range try { cout << "range_constraint = kw_range range;" << endl; };

# <arithmatic expr> .. <arithmatic expr>
range: add_exp de_dot_dot add_exp try { cout << "range = add_exp de_dot_dot add_exp;" << endl; };

# discrete range
dis_range: range try { cout << "dis_range = range;" << endl; };
dis_range: sub_type_no_index try { cout << "dis_range = sub_type_no_index;" << endl; };

# A list of discrete ranges.
dis_range_list: dis_range try { cout << "dis_range_list = dis_range;" << endl; };
dis_range_list: dis_range_list de_comma dis_range try { cout << "dis_range_list = dis_range_list de_comma dis_range;" << endl; };

# discrete range or add expression.
dis_range_or_add_exp: add_exp try { cout << "dis_range_or_add_exp = add_exp;" << endl; };
dis_range_or_add_exp: add_exp de_dot_dot add_exp try { cout << "dis_range_or_add_exp = add_exp de_dot_dot add_exp;" << endl; };
dis_range_or_add_exp: sub_def_range_const try { cout << "dis_range_or_add_exp = sub_def_range_const;" << endl; };
# --- END SUBTYPE, RANGES and DISCREET RANGES ---





# --- LITERAL ---
# All literals	= 1 2.3 "45"
# ---
# the literals
literal: lit_integer try { cout << "literal = lit_integer;" << endl; };
literal: lit_float try { cout << "literal = lit_float;" << endl; };
literal: lit_string try { cout << "literal = lit_string;" << endl; };
# --- END LITERAL

# ======================= END EXPRESSION =======================
# ==============================================================

#conflict type_name opt_agg_suff = type_name;
#conflict rel_exp dis_range_or_add_exp = rel_exp;

}%%

%%{
	write types;
	write data;
}%%


void Parser::init()
{
	%% write init;
}

void Parser::finish()
{
	%% write finish;
}

int Parser::parseLangEl( int type, const Token &tokenRef )
{
	const Token *token = &tokenRef;
	%% write exec;
	return errCount == 0 ? 0 : -1;
}

void test0()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_type, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_access, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_type, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_access, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_type, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_access, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_type, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_access, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( kw_new, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( kw_new, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( kw_new, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( kw_new, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_access, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( kw_new, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( kw_new, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( kw_new, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( kw_new, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( kw_new, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( kw_all, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test1()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_type, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_array, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_of, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test2()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_constant, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_type, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_array, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_of, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test3()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_else, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_and, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_and, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_or, token );
	parser.parseLangEl( kw_else, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_or, token );
	parser.parseLangEl( kw_else, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test4()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_pipe, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( kw_others, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( kw_others, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( kw_others, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( kw_others, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( kw_others, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_pipe, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_pipe, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_pipe, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_pipe, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_pipe, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_pipe, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_case, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test5()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test6()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_lt, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test7()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test8()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test9()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test10()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test11()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_raise, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test12()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test13()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_eq, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_neq, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_eq, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_else, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_neq, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_else, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_gt, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_gt, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_gteq, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_gteq, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_gteq, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_lt, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_lt, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_lteq, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_lteq, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_lteq, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test14()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_elsif, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_else, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test15()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_eq, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_neq, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_eq, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_else, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_neq, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_else, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_gt, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_gt, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_gteq, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_gteq, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_gteq, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_lt, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_lt, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_lteq, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_lteq, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_lteq, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test16()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_type, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_subtype, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_range, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_while, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_while, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_while, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( kw_reverse, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( kw_reverse, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( kw_reverse, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_range, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( kw_range, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test17()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( kw_abs, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test18()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_use, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test19()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_eq, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_else, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_cat, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_cat, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_field_qualification, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_div, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_cat, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test20()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_constant, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_type, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_array, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_of, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( kw_out, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( kw_out, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( kw_out, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( kw_out, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_gt, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_elsif, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_lt, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( kw_out, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_while, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_lt, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_while, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_gteq, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exit, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_gt, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( kw_out, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_neq, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_null, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_use, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_mult, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_plus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_mod, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test21()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_type, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_subtype, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_range, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_procedure, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_declare, token );
	parser.parseLangEl( kw_subtype, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_range, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_exception, token );
	parser.parseLangEl( kw_when, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_arrow, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test22()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_cat, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_cat, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_function, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_for, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_in, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_dot_dot, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_eq, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( kw_then, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_else, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_cat, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_cat, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_if, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( kw_loop, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_return, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( kw_use, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_cat, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( op_cat, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_comma, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_cat, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void test23()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( kw_package, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( kw_is, token );
	parser.parseLangEl( kw_body, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_float, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( op_minus, token );
	parser.parseLangEl( lit_integer, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_colon, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_assign, token );
	parser.parseLangEl( lit_string, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_begin, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_write, token );
	parser.parseLangEl( op_left_bracket, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( op_right_bracket, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( kw_end, token );
	parser.parseLangEl( ID, token );
	parser.parseLangEl( de_semicolon, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}

int main()
{
	test0();
	test1();
	test2();
	test3();
	test4();
	test5();
	test6();
	test7();
	test8();
	test9();
	test10();
	test11();
	test12();
	test13();
	test14();
	test15();
	test16();
	test17();
	test18();
	test19();
	test20();
	test21();
	test22();
	test23();
}

#ifdef _____OUTPUT_____
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
type_name = ID;
sub_type = type_name;
type_def = kw_access sub_type;
type_dec_st = kw_type ID kw_is type_def de_semicolon;
dec_stmt = type_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
type_name = ID;
sub_type = type_name;
type_def = kw_access sub_type;
type_dec_st = kw_type ID kw_is type_def de_semicolon;
dec_stmt = type_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
type_name = ID;
sub_type = type_name;
type_def = kw_access sub_type;
type_dec_st = kw_type ID kw_is type_def de_semicolon;
dec_stmt = type_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
type_name = ID;
sub_type = type_name;
type_def = kw_access sub_type;
type_dec_st = kw_type ID kw_is type_def de_semicolon;
dec_stmt = type_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
stmt_star = ;
name = ID;
type_name = ID;
factor_exp = kw_new type_name;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
type_name = ID;
factor_exp = kw_new type_name;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID op_field_qualification kw_all;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID op_field_qualification kw_all;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID op_field_qualification kw_all;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
type_name = ID;
factor_exp = kw_new type_name;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
type_name = ID;
factor_exp = kw_new type_name;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID op_field_qualification kw_all;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID op_field_qualification kw_all;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID op_field_qualification kw_all;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
type_name = ID;
sub_type = type_name;
type_def = kw_access sub_type;
typet = type_def;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
type_name = ID;
factor_exp = kw_new type_name;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
type_name = ID;
factor_exp = kw_new type_name;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID op_field_qualification kw_all;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID op_field_qualification kw_all;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID op_field_qualification kw_all;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
name = ID;
type_name = ID;
factor_exp = kw_new type_name;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID op_field_qualification kw_all;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
type_name = ID;
factor_exp = kw_new type_name;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID op_field_qualification kw_all;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID op_field_qualification kw_all opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
type_name = ID;
factor_exp = kw_new type_name;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID op_field_qualification kw_all;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
con_list_more = dis_range;
con_list = con_list_more;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
array_def = kw_array op_left_bracket con_list op_right_bracket kw_of type_or_sub;
type_def = array_def;
type_dec_st = kw_type ID kw_is type_def de_semicolon;
dec_stmt = type_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
opt_decl = ;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
opt_decl = ;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_decl = ;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
opt_decl = ;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
opt_decl = ;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
opt_decl = ;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = kw_constant;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
con_list_more = dis_range;
con_list = con_list_more;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
array_def = kw_array op_left_bracket con_list op_right_bracket kw_of type_or_sub;
type_def = array_def;
type_dec_st = kw_type ID kw_is type_def de_semicolon;
dec_stmt = type_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
proc_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ID;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
proc_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = kw_in;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
end_if = kw_else stmt_list kw_end kw_if de_semicolon;
else_if = end_if;
if_st = kw_if expr kw_then stmt_list else_if;
statement = if_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
formal_opt = ;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
formal_opt = ;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = log_exp kw_and rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = log_exp kw_and kw_then rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = log_exp kw_or kw_else rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = log_exp kw_or kw_else rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
when_list = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
choice = expr;
choice_list = choice;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
choice = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
choice = add_exp de_dot_dot add_exp;
choice_list = choice;
choice_list = choice de_pipe choice_list;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
others = kw_when kw_others de_arrow stmt_list;
case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;
statement = case_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
when_list = ;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
others = kw_when kw_others de_arrow stmt_list;
case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;
statement = case_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
when_list = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
choice = add_exp de_dot_dot add_exp;
choice_list = choice;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
others = ;
case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;
statement = case_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
when_list = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
choice = add_exp de_dot_dot add_exp;
choice_list = choice;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
others = ;
case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;
statement = case_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
when_list = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
choice = add_exp de_dot_dot add_exp;
choice_list = choice;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
others = ;
case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;
statement = case_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
when_list = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
choice = add_exp de_dot_dot add_exp;
choice_list = choice;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
others = ;
case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;
statement = case_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
when_list = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
choice = add_exp de_dot_dot add_exp;
choice_list = choice;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
others = ;
case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;
statement = case_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
when_list = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
choice = add_exp de_dot_dot add_exp;
choice_list = choice;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
others = ;
case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;
statement = case_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
when_list = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
choice = add_exp de_dot_dot add_exp;
choice_list = choice;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
when_list = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
choice = add_exp de_dot_dot add_exp;
choice_list = choice;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
choice = add_exp de_dot_dot add_exp;
choice_list = choice;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
others = kw_when kw_others de_arrow stmt_list;
case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;
statement = case_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
others = kw_when kw_others de_arrow stmt_list;
case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;
statement = case_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
when_list = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
choice = expr;
choice_list = choice;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
others = kw_when kw_others de_arrow stmt_list;
case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;
statement = case_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
when_list = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
choice = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
choice = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
choice = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
choice = expr;
choice_list = choice;
choice_list = choice de_pipe choice_list;
choice_list = choice de_pipe choice_list;
choice_list = choice de_pipe choice_list;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
choice = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
choice = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
choice = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
choice = expr;
choice_list = choice;
choice_list = choice de_pipe choice_list;
choice_list = choice de_pipe choice_list;
choice_list = choice de_pipe choice_list;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
when_list = when_list kw_when choice_list de_arrow stmt_list;
others = ;
case_st = kw_case expr kw_is when_list others kw_end kw_case de_semicolon;
statement = case_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ID;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
body_dec_list = ;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
p_spec_or_body = kw_body package_ID kw_is use_opt body_dec_list kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
body_dec_list = ;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lt add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = n_sufx_list name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name_suffix = op_field_qualification ID;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
end_if = kw_end kw_if de_semicolon;
else_if = end_if;
if_st = kw_if expr kw_then stmt_list else_if;
statement = if_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
exception_opt = ;
id_option = ;
p_spec_or_body = kw_body package_ID kw_is use_opt body_dec_list exception_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
package_ID = ID;
use_opt = ;
body_dec_list = ;
stmt_star = ;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = n_sufx_list name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
p_spec_or_body = kw_body package_ID kw_is use_opt body_dec_list kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
compilation = compilation prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
opt_decl = ;
stmt_star = ;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
exception_dec_st = id_list de_colon kw_exception de_semicolon;
dec_stmt = exception_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
use_opt = ;
body_dec_list = ;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
name = ID;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
stmt_star = ;
use_opt = ;
body_dec_list = ;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
use_opt = ;
body_dec_list = ;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
stmt_star = ;
use_opt = ;
body_dec_list = ;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
use_opt = ;
body_dec_list = ;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = compilation prag_list kw_package p_spec_or_body;
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
stmt_star = ;
use_opt = ;
body_dec_list = ;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
use_opt = ;
body_dec_list = ;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = compilation prag_list kw_package p_spec_or_body;
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
stmt_star = ;
use_opt = ;
body_dec_list = ;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
use_opt = ;
body_dec_list = ;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = compilation prag_list kw_package p_spec_or_body;
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name_suffix = op_field_qualification ID;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = compilation prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
exception_dec_st = id_list de_colon kw_exception de_semicolon;
dec_stmt = exception_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_decl = ;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
use_opt = ;
body_dec_list = ;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
name = ID;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
raise_st = kw_raise name de_semicolon;
statement = raise_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
opt_decl = ;
stmt_star = ;
opt_decl = ;
stmt_star = ;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_decl = ;
stmt_star = ;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
unary_exp = op_minus unary_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
unary_exp = op_minus unary_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
unary_exp = op_minus unary_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_eq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
unary_exp = op_minus unary_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_neq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_eq add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
end_if = kw_else stmt_list kw_end kw_if de_semicolon;
else_if = end_if;
if_st = kw_if expr kw_then stmt_list else_if;
statement = if_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_neq add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
end_if = kw_else stmt_list kw_end kw_if de_semicolon;
else_if = end_if;
if_st = kw_if expr kw_then stmt_list else_if;
statement = if_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gt add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gt add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gteq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gteq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gteq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lt add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lt add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lteq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lteq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lteq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
stmt_star = ;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
end_if = kw_else stmt_list kw_end kw_if de_semicolon;
else_if = end_if;
else_if = kw_elsif expr kw_then stmt_list else_if;
if_st = kw_if expr kw_then stmt_list else_if;
statement = if_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
end_if = kw_end kw_if de_semicolon;
else_if = end_if;
if_st = kw_if expr kw_then stmt_list else_if;
statement = if_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ID;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
unary_exp = op_minus unary_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
unary_exp = op_minus unary_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_eq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
unary_exp = op_minus unary_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_neq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_eq add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
end_if = kw_else stmt_list kw_end kw_if de_semicolon;
else_if = end_if;
if_st = kw_if expr kw_then stmt_list else_if;
statement = if_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_neq add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
end_if = kw_else stmt_list kw_end kw_if de_semicolon;
else_if = end_if;
if_st = kw_if expr kw_then stmt_list else_if;
statement = if_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gt add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gt add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gteq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gteq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gteq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lt add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lt add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lteq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lteq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lteq add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
enum_def = op_left_bracket id_list op_right_bracket;
type_def = enum_def;
type_dec_st = kw_type ID kw_is type_def de_semicolon;
dec_stmt = type_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
range_constraint = kw_range range;
sub_def_range_const = range_constraint;
sub_def = sub_def_range_const;
sub_type = sub_def;
sub_dec_st = kw_subtype ID kw_is sub_type de_semicolon;
dec_stmt = sub_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
adv_loop = kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
exit_st = kw_exit de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
adv_loop = kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
exit_st = kw_exit kw_when expr de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
adv_loop = kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
exit_st = kw_exit kw_when expr de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
exit_st = kw_exit de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
adv_loop = kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
adv_loop = kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
exit_st = kw_exit ID de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = ID de_colon loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
adv_loop = kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
adv_loop = kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
exit_st = kw_exit ID kw_when expr de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = ID de_colon loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
adv_loop = kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
adv_loop = kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
exit_st = kw_exit ID kw_when expr de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
exit_st = kw_exit de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
exit_st = kw_exit de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = ID de_colon loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
adv_loop = kw_while expr kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
exit_st = kw_exit de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
adv_loop = kw_while expr kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
exit_st = kw_exit de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
adv_loop = kw_while expr kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in kw_reverse dis_range kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in kw_reverse dis_range kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
exit_st = kw_exit de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in kw_reverse dis_range kw_loop;
stmt_star = ;
exit_st = kw_exit de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
type_name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
range_constraint = kw_range range;
sub_def_range_const = type_name range_constraint;
sub_type_no_index = sub_def_range_const;
dis_range = sub_type_no_index;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
exit_st = kw_exit ID de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = ID de_colon loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
range_constraint = kw_range range;
sub_def_range_const = range_constraint;
sub_type_no_index = sub_def_range_const;
dis_range = sub_type_no_index;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
exit_st = kw_exit de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
type_name = ID;
sub_type_no_index = type_name;
dis_range = sub_type_no_index;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
exit_st = kw_exit kw_when expr de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
exit_st = kw_exit ID kw_when expr de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = ID de_colon loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ID;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
spec_dec = dec_stmt;
spec_dec_list = spec_dec_list spec_dec;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
spec_dec = dec_stmt;
spec_dec_list = spec_dec_list spec_dec;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
spec_dec = dec_stmt;
spec_dec_list = spec_dec_list spec_dec;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
spec_dec = dec_stmt;
spec_dec_list = spec_dec_list spec_dec;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
spec_dec = dec_stmt;
spec_dec_list = spec_dec_list spec_dec;
private_opt = ;
use_opt = ;
body_dec_list = ;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
unary_exp = op_minus unary_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
unary_exp = op_minus unary_exp;
unary_exp = kw_abs unary_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
body_dec_list = ;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
p_spec_or_body = kw_body package_ID kw_is use_opt body_dec_list kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
package_ID = ID;
id_list_more = ID;
id_list = id_list_more;
use_opt = kw_use id_list de_semicolon;
body_dec_list = ;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
factor_exp = op_left_bracket expr op_right_bracket;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
factor_exp = op_left_bracket expr op_right_bracket;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
factor_exp = op_left_bracket expr op_right_bracket;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
factor_exp = op_left_bracket expr op_right_bracket;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
factor_exp = op_left_bracket expr op_right_bracket;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
unary_exp = op_minus unary_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
factor_exp = op_left_bracket expr op_right_bracket;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
p_spec_or_body = kw_body package_ID kw_is use_opt body_dec_list kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
compilation = compilation prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
func_designator = lit_string;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
name_suffix = op_field_qualification lit_string;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = lit_string;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
name_suffix = op_field_qualification lit_string;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = lit_string;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
name_suffix = op_field_qualification lit_string;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = lit_string;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
name_suffix = op_field_qualification lit_string;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = lit_string;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
func_designator = lit_string;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_eq add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_cat sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_cat sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
end_if = kw_else stmt_list kw_end kw_if de_semicolon;
else_if = end_if;
if_st = kw_if expr kw_then stmt_list else_if;
statement = if_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = lit_string;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
name_suffix = op_field_qualification lit_string;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = n_sufx_list name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
factor_exp = op_left_bracket expr op_right_bracket;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
factor_exp = op_left_bracket expr op_right_bracket;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_div unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_cat sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = kw_constant;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
spec_dec = dec_stmt;
spec_dec_list = spec_dec_list spec_dec;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
con_list_more = dis_range;
con_list = con_list_more;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
array_def = kw_array op_left_bracket con_list op_right_bracket kw_of type_or_sub;
type_def = array_def;
type_dec_st = kw_type ID kw_is type_def de_semicolon;
dec_stmt = type_dec_st;
spec_dec = dec_stmt;
spec_dec_list = spec_dec_list spec_dec;
func_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = kw_in kw_out;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
sub_pro_dec_st = sub_pro_spec de_semicolon;
dec_stmt = sub_pro_dec_st;
spec_dec = dec_stmt;
spec_dec_list = spec_dec_list spec_dec;
func_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = kw_in kw_out;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
sub_pro_dec_st = sub_pro_spec de_semicolon;
dec_stmt = sub_pro_dec_st;
spec_dec = dec_stmt;
spec_dec_list = spec_dec_list spec_dec;
proc_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = kw_in kw_out;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_procedure proc_designator formal_opt;
sub_pro_dec_st = sub_pro_spec de_semicolon;
dec_stmt = sub_pro_dec_st;
spec_dec = dec_stmt;
spec_dec_list = spec_dec_list spec_dec;
private_opt = ;
body_opt = ;
id_option = ID;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
package_ID = ID;
use_opt = ;
body_dec_list = ;
func_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = kw_in kw_out;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gt add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lt add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
end_if = kw_end kw_if de_semicolon;
else_if = end_if;
else_if = kw_elsif expr kw_then stmt_list else_if;
if_st = kw_if expr kw_then stmt_list else_if;
statement = if_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ID;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = kw_in kw_out;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
adv_loop = kw_loop;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_lt add_exp;
log_exp = rel_exp;
expr = log_exp;
adv_loop = kw_while expr kw_loop;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gteq add_exp;
log_exp = rel_exp;
expr = log_exp;
adv_loop = kw_while expr kw_loop;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_gt add_exp;
log_exp = rel_exp;
expr = log_exp;
exit_st = kw_exit kw_when expr de_semicolon;
statement = exit_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ID;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
proc_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = kw_in kw_out;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_neq add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_minus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
end_if = kw_end kw_if de_semicolon;
else_if = end_if;
if_st = kw_if expr kw_then stmt_list else_if;
statement = if_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ID;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
null_st = kw_null de_semicolon;
statement = null_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ID;
p_spec_or_body = kw_body package_ID kw_is use_opt body_dec_list kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
compilation = compilation prag_list kw_package p_spec_or_body;
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
body_opt = ;
id_option = ID;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = compilation prag_list kw_package p_spec_or_body;
prag_list = ;
package_ID = ID;
id_list_more = ID;
id_list = id_list_more;
use_opt = kw_use id_list de_semicolon;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
proc_designator = ID;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
stmt_star = ;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ID;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
factor_exp = op_left_bracket expr op_right_bracket;
unary_exp = factor_exp;
mult_exp = unary_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
factor_exp = op_left_bracket expr op_right_bracket;
unary_exp = factor_exp;
mult_exp = mult_exp op_mult unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_plus sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
factor_exp = op_left_bracket expr op_right_bracket;
unary_exp = factor_exp;
mult_exp = unary_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = mult_exp kw_mod unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
name = ID n_sufx_list;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_option = ;
p_spec_or_body = kw_body package_ID kw_is use_opt body_dec_list kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
compilation = compilation prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
enum_def = op_left_bracket id_list op_right_bracket;
type_def = enum_def;
type_dec_st = kw_type ID kw_is type_def de_semicolon;
dec_stmt = type_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
range_constraint = kw_range range;
sub_def_range_const = range_constraint;
sub_def = sub_def_range_const;
sub_type = sub_def;
sub_dec_st = kw_subtype ID kw_is sub_type de_semicolon;
dec_stmt = sub_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
proc_designator = ID;
formal_opt = ;
sub_pro_spec = kw_procedure proc_designator formal_opt;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
call_st = name de_semicolon;
statement = call_st;
stmt_star = stmt_star statement;
use_opt = ;
body_dec_list = ;
type_name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
range_constraint = kw_range range;
sub_def_range_const = type_name range_constraint;
sub_def = sub_def_range_const;
sub_type = sub_def;
sub_dec_st = kw_subtype ID kw_is sub_type de_semicolon;
dec_stmt = sub_dec_st;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
opt_decl = kw_declare use_opt body_dec_list;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
id_option = ;
block_st = opt_decl kw_begin stmt_list exception_opt kw_end id_option de_semicolon;
statement = block_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
handler_list = ;
name = ID;
h_name_list = name;
stmt_star = ;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
hand_options = h_name_list de_arrow stmt_list;
handler_list = handler_list kw_when hand_options;
exceptions = kw_exception handler_list;
exception_opt = exceptions;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
func_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_cat sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_cat sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
func_designator = ID;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec;
id_list_more = ID;
id_list = id_list_more;
mode = ;
param_dec = id_list de_colon mode ID;
param_dec_list = param_dec_list de_semicolon param_dec;
formal_opt = op_left_bracket param_dec_list op_right_bracket;
sub_pro_spec = kw_function func_designator formal_opt kw_return ID;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
range = add_exp de_dot_dot add_exp;
dis_range = range;
adv_loop = kw_for ID kw_in dis_range kw_loop;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp op_eq add_exp;
log_exp = rel_exp;
expr = log_exp;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
stmt_star = ;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_cat sign_exp;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_cat sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
end_if = kw_else stmt_list kw_end kw_if de_semicolon;
else_if = end_if;
if_st = kw_if expr kw_then stmt_list else_if;
statement = if_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
loop_body = adv_loop stmt_list kw_end kw_loop de_semicolon;
loop_st = loop_body;
statement = loop_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
return_st = kw_return expr de_semicolon;
statement = return_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
id_opt = ;
sub_body_dec = sub_pro_spec kw_is body_dec_list kw_begin stmt_list exception_opt kw_end id_opt de_semicolon;
body_dec_st = sub_body_dec;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
id_list_more = ID;
id_list = id_list_more;
use_opt = kw_use id_list de_semicolon;
body_dec_list = ;
id_list_more = ID;
id_list_more = id_list_more de_comma ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
init_opt = ;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
name = ID;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_cat sign_exp;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_cat sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = expr;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
params = params de_comma expr;
name_suffix = op_left_bracket params op_right_bracket;
n_sufx_list = name_suffix;
opt_agg_suff = ;
name_or_agg = ID n_sufx_list opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
name = ID;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
name = ID;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
assign_st = name op_assign expr de_semicolon;
statement = assign_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = add_exp op_cat sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_name_list de_semicolon w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = compilation prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
prag_list = ;
package_ID = ID;
use_opt = ;
spec_dec_list = ;
private_opt = ;
use_opt = ;
body_dec_list = ;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
literal = lit_float;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
literal = lit_integer;
factor_exp = literal;
unary_exp = factor_exp;
unary_exp = op_minus unary_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
id_list_more = ID;
id_list = id_list_more;
con_opt = ;
overld_resolve_more = ID;
overld_resolve = overld_resolve_more;
typet = overld_resolve;
type_or_sub = typet;
literal = lit_string;
factor_exp = literal;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
init_opt = op_assign expr;
object_dec = id_list de_colon con_opt type_or_sub init_opt de_semicolon;
dec_stmt = object_dec;
body_dec_st = dec_stmt;
body_dec_list = body_dec_list body_dec_st;
stmt_star = ;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
opt_agg_suff = ;
name_or_agg = ID opt_agg_suff;
factor_exp = name_or_agg;
unary_exp = factor_exp;
mult_exp = unary_exp;
sign_exp = mult_exp;
add_exp = sign_exp;
rel_exp = add_exp;
log_exp = rel_exp;
expr = log_exp;
w_param = expr;
w_name_list = w_param;
write_st = kw_write op_left_bracket w_name_list op_right_bracket de_semicolon;
statement = write_st;
stmt_star = stmt_star statement;
stmt_list = stmt_star;
exception_opt = ;
body_opt = kw_body use_opt body_dec_list kw_begin stmt_list exception_opt;
id_option = ID;
p_spec_or_body = package_ID kw_is use_opt spec_dec_list private_opt body_opt kw_end id_option de_semicolon;
compilation = prag_list kw_package p_spec_or_body;
prag_list = ;
input = compilation prag_list;
start = input;
0
#endif

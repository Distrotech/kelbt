#include <iostream>
#include <stdlib.h>

using namespace std;

struct Token { };
struct LangEl;

struct Parser
{
	%%{
		parser Parser;
	
		token t_word, t_float, t_integer, t_literal, t_character;
		token t_semi, t_back, t_sopen, t_sclose, t_dot, t_dollar;
		token t_copen, t_cclose, t_question, t_star, t_forward;
		token t_amp, t_comma, t_equals, t_bar, t_lt, t_gt, t_minus;
		token t_plus, t_open, t_close, t_bang, t_colon;
	}%%

	%% write instance_data;

	void init();
	int parseLangEl( int type, const Token &tokenRef );
	void finish();
};

%% write token_defs;

%%{

parser Parser;

start: Statements try { cout << "start = Statements;" << endl; };

Statements: Statements Statement try { cout << "Statements = Statements Statement;" << endl; };
Statements: Statement try { cout << "Statements = Statement;" << endl; };

Statement: Rule try { cout << "Statement = Rule;" << endl; };
Statement: Production try { cout << "Statement = Production;" << endl; };

Rule: Pattern t_equals Expression t_semi try { cout << "Rule = Pattern t_equals Expression t_semi;" << endl; };

Pattern: Pattern ProdWord try { cout << "Pattern = Pattern ProdWord;" << endl; };
Pattern: ProdWord try { cout << "Pattern = ProdWord;" << endl; };

Expression: Expression ExpItem try { cout << "Expression = Expression ExpItem;" << endl; };
Expression: try { cout << "Expression = ;" << endl; };

ExpItem: ExpVarRef try { cout << "ExpItem = ExpVarRef;" << endl; };
ExpItem: ExpAny try { cout << "ExpItem = ExpAny;" << endl; };

ExpVarRef: t_dollar SimpleVarRef try { cout << "ExpVarRef = t_dollar SimpleVarRef;" << endl; };
ExpVarRef: t_question SimpleVarRef try { cout << "ExpVarRef = t_question SimpleVarRef;" << endl; };
ExpVarRef: t_dollar t_copen VarRef t_cclose try { cout << "ExpVarRef = t_dollar t_copen VarRef t_cclose;" << endl; };
ExpVarRef: t_question t_copen VarRef t_cclose try { cout << "ExpVarRef = t_question t_copen VarRef t_cclose;" << endl; };

ExpAny: t_word try { cout << "ExpAny = t_word;" << endl; };
ExpAny: t_float try { cout << "ExpAny = t_float;" << endl; };
ExpAny: t_integer try { cout << "ExpAny = t_integer;" << endl; };
ExpAny: t_literal try { cout << "ExpAny = t_literal;" << endl; };
ExpAny: t_character try { cout << "ExpAny = t_character;" << endl; };
ExpAny: t_sopen try { cout << "ExpAny = t_sopen;" << endl; };
ExpAny: t_sclose try { cout << "ExpAny = t_sclose;" << endl; };
ExpAny: t_dot try { cout << "ExpAny = t_dot;" << endl; };
ExpAny: t_copen try { cout << "ExpAny = t_copen;" << endl; };
ExpAny: t_cclose try { cout << "ExpAny = t_cclose;" << endl; };

Production: ProductionName t_minus t_gt WordOrExpression t_semi  try { cout << "Production = ProductionName t_minus t_gt WordOrExpression t_semi ;" << endl; };

ProductionName: t_word try { cout << "ProductionName = t_word;" << endl; };

CodeStatements: CodeStatements CodeStatement try { cout << "CodeStatements = CodeStatements CodeStatement;" << endl; };
CodeStatements: try { cout << "CodeStatements = ;" << endl; };

CodeStatement: AssignVarName t_equals AssignRhs t_semi try { cout << "CodeStatement = AssignVarName t_equals AssignRhs t_semi;" << endl; };

AssignRhs: CodeExpr1 t_question CodeExpr1 t_colon CodeExpr1 try { cout << "AssignRhs = CodeExpr1 t_question CodeExpr1 t_colon CodeExpr1;" << endl; };
AssignRhs: CodeExpr1 try { cout << "AssignRhs = CodeExpr1;" << endl; };

SimpleVarRef: t_word try { cout << "SimpleVarRef = t_word;" << endl; };

AssignVarName: t_word try { cout << "AssignVarName = t_word;" << endl; };
 
VarRef: VarRef t_dot VarName try { cout << "VarRef = VarRef t_dot VarName;" << endl; };
VarRef: VarName try { cout << "VarRef = VarName;" << endl; };

VarName: t_word try { cout << "VarName = t_word;" << endl; };
VarName: t_word t_sopen t_integer t_sclose try { cout << "VarName = t_word t_sopen t_integer t_sclose;" << endl; };
 
CodeExpr1: CodeExpr1 t_equals t_equals CodeExpr2 try { cout << "CodeExpr1 = CodeExpr1 t_equals t_equals CodeExpr2;" << endl; };
CodeExpr1: CodeExpr1 t_gt CodeExpr2 try { cout << "CodeExpr1 = CodeExpr1 t_gt CodeExpr2;" << endl; };
CodeExpr1: CodeExpr1 t_lt CodeExpr2 try { cout << "CodeExpr1 = CodeExpr1 t_lt CodeExpr2;" << endl; };
CodeExpr1: CodeExpr1 t_gt t_equals CodeExpr2 try { cout << "CodeExpr1 = CodeExpr1 t_gt t_equals CodeExpr2;" << endl; };
CodeExpr1: CodeExpr1 t_lt t_equals CodeExpr2 try { cout << "CodeExpr1 = CodeExpr1 t_lt t_equals CodeExpr2;" << endl; };
CodeExpr1: CodeExpr2 try { cout << "CodeExpr1 = CodeExpr2;" << endl; };

CodeExpr2: CodeExpr2 t_plus CodeExpr3 try { cout << "CodeExpr2 = CodeExpr2 t_plus CodeExpr3;" << endl; };
CodeExpr2: CodeExpr2 t_minus CodeExpr3 try { cout << "CodeExpr2 = CodeExpr2 t_minus CodeExpr3;" << endl; };
CodeExpr2: CodeExpr2 t_amp CodeExpr3 try { cout << "CodeExpr2 = CodeExpr2 t_amp CodeExpr3;" << endl; };
CodeExpr2: CodeExpr3 try { cout << "CodeExpr2 = CodeExpr3;" << endl; };

CodeExpr3: CodeExpr3 t_star UnaryFactor try { cout << "CodeExpr3 = CodeExpr3 t_star UnaryFactor;" << endl; };
CodeExpr3: CodeExpr3 t_forward UnaryFactor try { cout << "CodeExpr3 = CodeExpr3 t_forward UnaryFactor;" << endl; };
CodeExpr3: UnaryFactor try { cout << "CodeExpr3 = UnaryFactor;" << endl; };

UnaryFactor: t_minus Factor try { cout << "UnaryFactor = t_minus Factor;" << endl; };
UnaryFactor: t_bang Factor try { cout << "UnaryFactor = t_bang Factor;" << endl; };
UnaryFactor: Factor try { cout << "UnaryFactor = Factor;" << endl; };

Factor: t_open CodeExpr1 t_close try { cout << "Factor = t_open CodeExpr1 t_close;" << endl; };
Factor: VarRef try { cout << "Factor = VarRef;" << endl; };
Factor: t_literal try { cout << "Factor = t_literal;" << endl; };
Factor: t_integer try { cout << "Factor = t_integer;" << endl; };
Factor: FunctionCall try { cout << "Factor = FunctionCall;" << endl; };

FunctionCall: t_word t_open ParamList t_close try { cout << "FunctionCall = t_word t_open ParamList t_close;" << endl; };

ParamList: NonLastParams LastParam try { cout << "ParamList = NonLastParams LastParam;" << endl; };

NonLastParams: NonLastParams CodeExpr1 t_comma try { cout << "NonLastParams = NonLastParams CodeExpr1 t_comma;" << endl; };
NonLastParams: try { cout << "NonLastParams = ;" << endl; };

LastParam: CodeExpr1 try { cout << "LastParam = CodeExpr1;" << endl; };
LastParam: try { cout << "LastParam = ;" << endl; };

WordOrExpression: WordOrExpression t_bar WordListOptionalFunc try { cout << "WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;" << endl; };
WordOrExpression: WordListOptionalFunc try { cout << "WordOrExpression = WordListOptionalFunc;" << endl; };

WordListOptionalFunc: WordList t_copen PrepareCurFunc CodeStatements t_cclose try { cout << "WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;" << endl; };
WordListOptionalFunc: WordList try { cout << "WordListOptionalFunc = WordList;" << endl; };
 
PrepareCurFunc: try { cout << "PrepareCurFunc = ;" << endl; };

WordList: WordList ProdWord try { cout << "WordList = WordList ProdWord;" << endl; };
WordList: try { cout << "WordList = ;" << endl; };

ProdWord: t_word try { cout << "ProdWord = t_word;" << endl; };
ProdWord: t_integer try { cout << "ProdWord = t_integer;" << endl; };
ProdWord: t_lt t_word t_gt try { cout << "ProdWord = t_lt t_word t_gt;" << endl; };
ProdWord: t_sopen t_word t_sclose try { cout << "ProdWord = t_sopen t_word t_sclose;" << endl; };
ProdWord: t_literal try { cout << "ProdWord = t_literal;" << endl; };

}%%

%%{
	write types;
	write data;
}%%


void Parser::init()
{
	%% write init;
}

void Parser::finish()
{
	%% write finish;
}

int Parser::parseLangEl( int type, const Token &tokenRef )
{
	const Token *token = &tokenRef;
	%% write exec;
	return errCount == 0 ? 0 : -1;
}

void ambiguity()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void ll()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_colon, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_colon, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_colon, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_star, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_star, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_star, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_star, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_colon, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_colon, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_plus, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_star, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_open, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_comma, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_close, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void howdoi()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_amp, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_amp, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_amp, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_amp, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_amp, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_amp, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void lookup()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_question, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void namesp()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void nullprods()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void scratch()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}
void variables()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_bar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_literal, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_minus, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_lt, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_gt, token );
	parser.parseLangEl( t_equals, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_copen, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_dot, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_sopen, token );
	parser.parseLangEl( t_integer, token );
	parser.parseLangEl( t_sclose, token );
	parser.parseLangEl( t_cclose, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_character, token );
	parser.parseLangEl( t_dollar, token );
	parser.parseLangEl( t_word, token );
	parser.parseLangEl( t_semi, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}

int main()
{
	ambiguity();
	ll();
	howdoi();
	lookup();
	namesp();
	nullprods();
	scratch();
	variables();
}

#ifdef _____OUTPUT_____
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_word;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_integer;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_dollar SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProdWord = t_word;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_integer;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_dollar SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
start = Statements;
0
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_literal;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_literal;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr1 t_gt t_equals CodeExpr2;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1 t_question CodeExpr1 t_colon CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_literal;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_literal;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_literal;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_literal;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr1 t_gt CodeExpr2;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
Factor = t_open CodeExpr1 t_close;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
Factor = t_open CodeExpr1 t_close;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1 t_question CodeExpr1 t_colon CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr1 t_lt CodeExpr2;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
Factor = t_open CodeExpr1 t_close;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
Factor = t_open CodeExpr1 t_close;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1 t_question CodeExpr1 t_colon CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = CodeExpr3 t_star UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
Factor = t_open CodeExpr1 t_close;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = CodeExpr3 t_star UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
Factor = t_open CodeExpr1 t_close;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = CodeExpr3 t_star UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
Factor = t_open CodeExpr1 t_close;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = CodeExpr3 t_star UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
Factor = t_open CodeExpr1 t_close;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr1 t_gt CodeExpr2;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1 t_question CodeExpr1 t_colon CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr1 t_lt CodeExpr2;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1 t_question CodeExpr1 t_colon CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_plus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = CodeExpr3 t_star UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_minus CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
NonLastParams = ;
LastParam = ;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_literal;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
NonLastParams = ;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
NonLastParams = NonLastParams CodeExpr1 t_comma;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
LastParam = CodeExpr1;
ParamList = NonLastParams LastParam;
FunctionCall = t_word t_open ParamList t_close;
Factor = FunctionCall;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarName;
VarName = t_word;
VarRef = VarRef t_dot VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarName;
VarName = t_word;
VarRef = VarRef t_dot VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarName;
VarName = t_word;
VarRef = VarRef t_dot VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarName;
VarName = t_word;
VarRef = VarRef t_dot VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_question SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_dollar SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_question SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_dollar SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_dollar SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_question SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_dollar SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_question SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_dollar SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_question SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_dollar SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_question SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_dollar SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_question SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_question SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
Expression = ;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_integer;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_dollar SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_question SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_question SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_question SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
start = Statements;
0
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_amp CodeExpr3;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_amp CodeExpr3;
VarName = t_word;
VarRef = VarName;
VarName = t_word;
VarRef = VarRef t_dot VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_amp CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
VarName = t_word;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_amp CodeExpr3;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_amp CodeExpr3;
VarName = t_word;
VarRef = VarName;
VarName = t_word;
VarRef = VarRef t_dot VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr2 t_amp CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_word;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
VarName = t_word;
VarRef = VarName;
ExpVarRef = t_dollar t_copen VarRef t_cclose;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
start = Statements;
0
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
VarName = t_word;
VarRef = VarName;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarRef t_dot VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
VarName = t_word;
VarRef = VarName;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarRef t_dot VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
VarName = t_word;
VarRef = VarName;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarRef t_dot VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
VarName = t_word;
VarRef = VarName;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarRef t_dot VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
AssignVarName = t_word;
VarName = t_word;
VarRef = VarName;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarRef t_dot VarName;
Factor = VarRef;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_word;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
VarName = t_word;
VarRef = VarName;
ExpVarRef = t_question t_copen VarRef t_cclose;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProdWord = t_word;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
VarName = t_word;
VarRef = VarName;
ExpVarRef = t_question t_copen VarRef t_cclose;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
start = Statements;
0
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_literal;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_word;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
VarName = t_word;
VarRef = VarName;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarRef t_dot VarName;
ExpVarRef = t_dollar t_copen VarRef t_cclose;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
VarName = t_word;
VarRef = VarName;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarRef t_dot VarName;
ExpVarRef = t_dollar t_copen VarRef t_cclose;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_word;
Pattern = ProdWord;
ProdWord = t_word;
Pattern = Pattern ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
VarName = t_word;
VarRef = VarName;
VarName = t_word;
VarRef = VarRef t_dot VarName;
ExpVarRef = t_dollar t_copen VarRef t_cclose;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
VarName = t_word;
VarRef = VarName;
VarName = t_word;
VarRef = VarRef t_dot VarName;
ExpVarRef = t_dollar t_copen VarRef t_cclose;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
start = Statements;
0
ProductionName = t_word;
WordList = ;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statement;
ProdWord = t_word;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
ProdWord = t_word;
Pattern = Pattern ProdWord;
ProdWord = t_word;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
VarName = t_word;
VarRef = VarName;
ExpVarRef = t_dollar t_copen VarRef t_cclose;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
start = Statements;
0
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr1 t_equals t_equals CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statement;
ProdWord = t_lt t_word t_gt;
Pattern = ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
start = Statements;
0
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_literal;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordListOptionalFunc;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
PrepareCurFunc = ;
CodeStatements = ;
AssignVarName = t_word;
Factor = t_literal;
UnaryFactor = Factor;
CodeExpr3 = UnaryFactor;
CodeExpr2 = CodeExpr3;
CodeExpr1 = CodeExpr2;
AssignRhs = CodeExpr1;
CodeStatement = AssignVarName t_equals AssignRhs t_semi;
CodeStatements = CodeStatements CodeStatement;
WordListOptionalFunc = WordList t_copen PrepareCurFunc CodeStatements t_cclose;
WordOrExpression = WordOrExpression t_bar WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProductionName = t_word;
WordList = ;
ProdWord = t_word;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_sopen t_word t_sclose;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
ProdWord = t_lt t_word t_gt;
WordList = WordList ProdWord;
WordListOptionalFunc = WordList;
WordOrExpression = WordListOptionalFunc;
Production = ProductionName t_minus t_gt WordOrExpression t_semi ;
Statement = Production;
Statements = Statements Statement;
ProdWord = t_word;
Pattern = ProdWord;
ProdWord = t_lt t_word t_gt;
Pattern = Pattern ProdWord;
Expression = ;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
VarName = t_word;
VarRef = VarName;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarRef t_dot VarName;
ExpVarRef = t_dollar t_copen VarRef t_cclose;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
VarName = t_word;
VarRef = VarName;
VarName = t_word t_sopen t_integer t_sclose;
VarRef = VarRef t_dot VarName;
ExpVarRef = t_dollar t_copen VarRef t_cclose;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_dollar SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_word;
ExpItem = ExpAny;
Expression = Expression ExpItem;
ExpAny = t_character;
ExpItem = ExpAny;
Expression = Expression ExpItem;
SimpleVarRef = t_word;
ExpVarRef = t_dollar SimpleVarRef;
ExpItem = ExpVarRef;
Expression = Expression ExpItem;
Rule = Pattern t_equals Expression t_semi;
Statement = Rule;
Statements = Statements Statement;
start = Statements;
0
#endif

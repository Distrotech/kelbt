
#include <iostream>
#include <stdlib.h>
using namespace std;

//#define LOG_ACTIONS
//#define LOG_BACKTRACK

struct Token { };
struct LangEl;

struct Parser
{
	%%{
		parser Parser;

		# Token names.
		token number, id, stringlit;
	}%%

	%% write instance_data;

	void init();
	int parseLangEl( int type, const Token &tokenRef );
	void finish();
};

%% write token_defs;

%%{

parser Parser;

start: prefix choice1 choice2 stringlit id
	try { cout << "start: prefix choice1 choice2 stringlit id;" << endl; };

prefix: id
	try { cout << "prefix: id;" << endl; };

choice1: number number
	try { cout << "choice1: number number;" << endl; }
	undo { cout << "UNDOING choice1: number number;" << endl; };
choice1: number
	try { cout << "choice1: number;" << endl; };

choice2: stringlit id
	try { cout << "choice2: stringlit id;" << endl; }
	undo { cout << "UNDOING choice2: stringlit id;" << endl; };

choice2: number number
	try { cout << "choice2: number number;" << endl; };
choice2: id number
	try { cout << "choice2: id number;" << endl; };
choice2: number
	try { cout << "choice2: number;" << endl; };

}%%

%%{
	write types;
	write data;
}%%


void Parser::init()
{
	%% write init;
}

void Parser::finish()
{
	%% write finish;
}

int Parser::parseLangEl( int type, const Token &tokenRef )
{
	const Token *token = &tokenRef;
	%% write exec;
	return errCount == 0 ? 0 : -1;
}

void test0()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( id, token );
	parser.parseLangEl( number, token );
	parser.parseLangEl( number, token );
	parser.parseLangEl( stringlit, token );
	parser.parseLangEl( id, token );
	parser.parseLangEl( Parser_tk_eof, token );
	parser.finish();
	cout << parser.errCount << endl;
}

int main()
{
	test0();
}

#ifdef _____OUTPUT_____
prefix: id;
choice1: number number;
choice2: stringlit id;
UNDOING choice2: stringlit id;
UNDOING choice1: number number;
choice1: number;
choice2: number;
start: prefix choice1 choice2 stringlit id;
0
#endif

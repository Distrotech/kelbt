// @IGNORE: yes

#include <iostream>
using namespace std;

%% ragelpar

token rl_section,
	rl_uInt,
	rl_pInt,
	rl_nInt,
	rl_hex,
	rl_word,
	rl_literal,
	rl_doubleDot,
	rl_arrow,
	rl_reLiteralSlash,
	rl_reLiteralOpen,
	rl_reLiteralOpenNeg,
	rl_reLiteralClose,
	rl_reLiteralDot,
	rl_reLiteralStar,
	rl_reLiteralDash,
	rl_reLiteralChar,
	rl_orLiteral,
	rl_builtin,
	rl_data,
	rl_action,
	rl_init,
	rl_clear,
	rl_alphType,
	rl_range,
	rl_exp,
	rl_start,
	rl_final,
	rl_star,
	rl_question,
	rl_plus,
	rl_bang,
	rl_open,
	rl_close,
	rl_semi,
	rl_equals,
	rl_colon,
	rl_percent,
	rl_dollar,
	rl_minus,
	rl_bar,
	rl_amp,
	rl_dot,
	rl_gt, 
	rl_comma;

start = FsmSpecList { cout << "start = FsmSpecList;" << endl; };

FsmSpecList = FsmSpecList FsmSpec { cout << "FsmSpecList = FsmSpecList FsmSpec;" << endl; };
FsmSpecList =  { cout << "FsmSpecList = ;" << endl; };

FsmSpec = rl_section rl_word StatementList rl_section { cout << "FsmSpec = rl_section rl_word StatementList rl_section;" << endl; };

StatementList = StatementList Statement { cout << "StatementList = StatementList Statement;" << endl; };
StatementList =  { cout << "StatementList = ;" << endl; };

Statement = RLAssignment { cout << "Statement = RLAssignment;" << endl; };
Statement = DataSpec { cout << "Statement = DataSpec;" << endl; };
Statement = ActionSpec { cout << "Statement = ActionSpec;" << endl; };
Statement = InitSpec { cout << "Statement = InitSpec;" << endl; };
Statement = AlphSpec { cout << "Statement = AlphSpec;" << endl; };
Statement = RangeSpec { cout << "Statement = RangeSpec;" << endl; };


InitSpec = rl_init rl_builtin { cout << "InitSpec = rl_init rl_builtin;" << endl; };
DataSpec = rl_data rl_builtin rl_semi { cout << "DataSpec = rl_data rl_builtin rl_semi;" << endl; };
ActionSpec = rl_action rl_word rl_builtin { cout << "ActionSpec = rl_action rl_word rl_builtin;" << endl; };
AlphSpec = rl_alphType rl_word rl_word rl_semi { cout << "AlphSpec = rl_alphType rl_word rl_word rl_semi;" << endl; };
AlphSpec = rl_alphType rl_word rl_semi { cout << "AlphSpec = rl_alphType rl_word rl_semi;" << endl; };
RangeSpec = rl_range AlphabetNum AlphabetNum rl_semi { cout << "RangeSpec = rl_range AlphabetNum AlphabetNum rl_semi;" << endl; };

RLAssignment = MachineName rl_equals Expression rl_semi { cout << "RLAssignment = MachineName rl_equals Expression rl_semi;" << endl; };
MachineName = rl_word { cout << "MachineName = rl_word;" << endl; };

Expression = Expression rl_bar Term { cout << "Expression = Expression rl_bar Term;" << endl; };
Expression = Expression rl_amp Term { cout << "Expression = Expression rl_amp Term;" << endl; };
Expression = Expression rl_minus Term { cout << "Expression = Expression rl_minus Term;" << endl; };
Expression = Term { cout << "Expression = Term;" << endl; };

Term = Term FactorWithAug { cout << "Term = Term FactorWithAug;" << endl; };
Term = Term rl_dot FactorWithAug { cout << "Term = Term rl_dot FactorWithAug;" << endl; };
Term = FactorWithAug { cout << "Term = FactorWithAug;" << endl; };

FactorWithAug = FactorWithAug AugType ActionEmbed { cout << "FactorWithAug = FactorWithAug AugType ActionEmbed;" << endl; };
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug { cout << "FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;" << endl; };
FactorWithAug = FactorWithRep { cout << "FactorWithAug = FactorWithRep;" << endl; };

PriorityAug = PriorityAugStr { cout << "PriorityAug = PriorityAugStr;" << endl; };

OptPriorName = rl_word rl_comma { cout << "OptPriorName = rl_word rl_comma;" << endl; };
OptPriorName =  { cout << "OptPriorName = ;" << endl; };

PriorityAugStr = rl_nInt { cout << "PriorityAugStr = rl_nInt;" << endl; };
PriorityAugStr = rl_pInt { cout << "PriorityAugStr = rl_pInt;" << endl; };
PriorityAugStr = rl_uInt { cout << "PriorityAugStr = rl_uInt;" << endl; };

AugType = rl_colon { cout << "AugType = rl_colon;" << endl; };
AugType = rl_percent { cout << "AugType = rl_percent;" << endl; };
AugType = rl_dollar { cout << "AugType = rl_dollar;" << endl; };
AugType = rl_gt { cout << "AugType = rl_gt;" << endl; };

ActionEmbed = rl_word { cout << "ActionEmbed = rl_word;" << endl; };
ActionEmbed = rl_builtin { cout << "ActionEmbed = rl_builtin;" << endl; };

FactorWithRep = FactorWithRep rl_star { cout << "FactorWithRep = FactorWithRep rl_star;" << endl; };
FactorWithRep = FactorWithRep rl_question { cout << "FactorWithRep = FactorWithRep rl_question;" << endl; };
FactorWithRep = FactorWithRep rl_plus { cout << "FactorWithRep = FactorWithRep rl_plus;" << endl; };
FactorWithRep = FactorWithNeg { cout << "FactorWithRep = FactorWithNeg;" << endl; };

FactorWithNeg = rl_bang FactorWithNeg { cout << "FactorWithNeg = rl_bang FactorWithNeg;" << endl; };
FactorWithNeg = Factor { cout << "FactorWithNeg = Factor;" << endl; };

Factor = rl_literal { cout << "Factor = rl_literal;" << endl; };
Factor = rl_orLiteral { cout << "Factor = rl_orLiteral;" << endl; };
Factor = rl_reLiteralSlash RegularExpr rl_reLiteralSlash { cout << "Factor = rl_reLiteralSlash RegularExpr rl_reLiteralSlash;" << endl; };
Factor = AlphabetNum { cout << "Factor = AlphabetNum;" << endl; };
Factor = RangeLit rl_doubleDot RangeLit { cout << "Factor = RangeLit rl_doubleDot RangeLit;" << endl; };
Factor = rl_word { cout << "Factor = rl_word;" << endl; };
Factor = ExplicitMachine { cout << "Factor = ExplicitMachine;" << endl; };
Factor = rl_open Expression rl_close { cout << "Factor = rl_open Expression rl_close;" << endl; };


ExplicitMachine = rl_exp rl_open ExpStateList rl_close { cout << "ExplicitMachine = rl_exp rl_open ExpStateList rl_close;" << endl; };

ExpStateList = ExpStateList rl_semi ExpState { cout << "ExpStateList = ExpStateList rl_semi ExpState;" << endl; };
ExpStateList = ExpState { cout << "ExpStateList = ExpState;" << endl; };

ExpState = ExpStateMods rl_word ExpStateAug ExpTransList { cout << "ExpState = ExpStateMods rl_word ExpStateAug ExpTransList;" << endl; };

ExpStateMods = rl_start rl_final { cout << "ExpStateMods = rl_start rl_final;" << endl; };
ExpStateMods = rl_final rl_start { cout << "ExpStateMods = rl_final rl_start;" << endl; };
ExpStateMods = rl_start { cout << "ExpStateMods = rl_start;" << endl; };
ExpStateMods = rl_final { cout << "ExpStateMods = rl_final;" << endl; };
ExpStateMods =  { cout << "ExpStateMods = ;" << endl; };


ExpStateAug = ExpStateAug rl_percent ActionEmbed { cout << "ExpStateAug = ExpStateAug rl_percent ActionEmbed;" << endl; };
ExpStateAug = ExpStateAug rl_percent PriorityAug { cout << "ExpStateAug = ExpStateAug rl_percent PriorityAug;" << endl; };
ExpStateAug =  { cout << "ExpStateAug = ;" << endl; };
ExpTransList = rl_colon ExpTLOneOrMore { cout << "ExpTransList = rl_colon ExpTLOneOrMore;" << endl; };
ExpTransList =  { cout << "ExpTransList = ;" << endl; };

ExpTLOneOrMore = ExpTLOneOrMore rl_comma ExpTrans { cout << "ExpTLOneOrMore = ExpTLOneOrMore rl_comma ExpTrans;" << endl; };
ExpTLOneOrMore = ExpTrans { cout << "ExpTLOneOrMore = ExpTrans;" << endl; };
ExpTrans = Expression rl_arrow rl_word { cout << "ExpTrans = Expression rl_arrow rl_word;" << endl; };

RegularExpr = RegularExpr RegularExprItem { cout << "RegularExpr = RegularExpr RegularExprItem;" << endl; };
RegularExpr =  { cout << "RegularExpr = ;" << endl; };

RegularExprItem = RegularExprChar rl_reLiteralStar { cout << "RegularExprItem = RegularExprChar rl_reLiteralStar;" << endl; };
RegularExprItem = RegularExprChar { cout << "RegularExprItem = RegularExprChar;" << endl; };

RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose { cout << "RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;" << endl; };
RegularExprChar = rl_reLiteralOpenNeg RegularExprOrData rl_reLiteralClose { cout << "RegularExprChar = rl_reLiteralOpenNeg RegularExprOrData rl_reLiteralClose;" << endl; };
RegularExprChar = rl_reLiteralDot { cout << "RegularExprChar = rl_reLiteralDot;" << endl; };
RegularExprChar = rl_reLiteralChar { cout << "RegularExprChar = rl_reLiteralChar;" << endl; };

RegularExprOrData = RegularExprOrData RegularExprOrChar { cout << "RegularExprOrData = RegularExprOrData RegularExprOrChar;" << endl; };
RegularExprOrData =  { cout << "RegularExprOrData = ;" << endl; };


RegularExprOrChar = rl_reLiteralChar { cout << "RegularExprOrChar = rl_reLiteralChar;" << endl; };
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar { cout << "RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;" << endl; };

RangeLit = rl_literal { cout << "RangeLit = rl_literal;" << endl; };
RangeLit = AlphabetNum { cout << "RangeLit = AlphabetNum;" << endl; };

AlphabetNum = rl_uInt { cout << "AlphabetNum = rl_uInt;" << endl; };
AlphabetNum = rl_pInt { cout << "AlphabetNum = rl_pInt;" << endl; };
AlphabetNum = rl_nInt { cout << "AlphabetNum = rl_nInt;" << endl; };
AlphabetNum = rl_hex { cout << "AlphabetNum = rl_hex;" << endl; };

%%

void awkemu()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_minus, token );
	parser.parseLangEl( rl_orLiteral, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_plus, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_orLiteral, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_minus, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_gt, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( Parser_tk_eof, token );
	cout << parser.finish() << endl;
}
void builtin()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_alphType, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( Parser_tk_eof, token );
	cout << parser.finish() << endl;
}
void clang()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_init, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_minus, token );
	parser.parseLangEl( rl_orLiteral, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_gt, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_gt, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_minus, token );
	parser.parseLangEl( rl_orLiteral, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_minus, token );
	parser.parseLangEl( rl_orLiteral, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_minus, token );
	parser.parseLangEl( rl_hex, token );
	parser.parseLangEl( rl_doubleDot, token );
	parser.parseLangEl( rl_hex, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_plus, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_plus, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_plus, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_gt, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_plus, token );
	parser.parseLangEl( rl_gt, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( Parser_tk_eof, token );
	cout << parser.finish() << endl;
}
void forder1()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_gt, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_gt, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( Parser_tk_eof, token );
	cout << parser.finish() << endl;
}
void forder2()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_gt, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_gt, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( Parser_tk_eof, token );
	cout << parser.finish() << endl;
}
void forder3()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_gt, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_gt, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( Parser_tk_eof, token );
	cout << parser.finish() << endl;
}
void highc()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_alphType, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_hex, token );
	parser.parseLangEl( rl_doubleDot, token );
	parser.parseLangEl( rl_hex, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_hex, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_hex, token );
	parser.parseLangEl( rl_doubleDot, token );
	parser.parseLangEl( rl_hex, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_doubleDot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_plus, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( Parser_tk_eof, token );
	cout << parser.finish() << endl;
}
void highcc()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_alphType, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_hex, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( Parser_tk_eof, token );
	cout << parser.finish() << endl;
}
void mailbox()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralOpen, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralDash, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_reLiteralOpenNeg, token );
	parser.parseLangEl( rl_reLiteralChar, token );
	parser.parseLangEl( rl_reLiteralClose, token );
	parser.parseLangEl( rl_reLiteralSlash, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_comma, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_minus, token );
	parser.parseLangEl( rl_orLiteral, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_plus, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_minus, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_dollar, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_orLiteral, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_percent, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_minus, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_comma, token );
	parser.parseLangEl( rl_uInt, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( Parser_tk_eof, token );
	cout << parser.finish() << endl;
}
void minimize1()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_action, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_orLiteral, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_orLiteral, token );
	parser.parseLangEl( rl_star, token );
	parser.parseLangEl( rl_colon, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_dot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( Parser_tk_eof, token );
	cout << parser.finish() << endl;
}
void range()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_open, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_doubleDot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_doubleDot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_doubleDot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_doubleDot, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_close, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( Parser_tk_eof, token );
	cout << parser.finish() << endl;
}
void strings1()
{
	Parser parser;
	Token token;
	parser.init();
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_data, token );
	parser.parseLangEl( rl_builtin, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_word, token );
	parser.parseLangEl( rl_equals, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_bar, token );
	parser.parseLangEl( rl_literal, token );
	parser.parseLangEl( rl_semi, token );
	parser.parseLangEl( rl_section, token );
	parser.parseLangEl( Parser_tk_eof, token );
	cout << parser.finish() << endl;
}

int main()
{
	awkemu();
	builtin();
	clang();
	forder1();
	forder2();
	forder3();
	highc();
	highcc();
	mailbox();
	minimize1();
	range();
	strings1();
}

#ifdef _____OUTPUT_____
FsmSpecList = ;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_orLiteral;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_minus Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_plus;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_orLiteral;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_dollar;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_percent;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_dollar;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
AugType = rl_percent;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
Term = FactorWithAug;
Expression = Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_minus Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
AugType = rl_dollar;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_percent;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_gt;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
start = FsmSpecList;
0
FsmSpecList = ;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
AlphSpec = rl_alphType rl_word rl_word rl_semi;
Statement = AlphSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
start = FsmSpecList;
0
FsmSpecList = ;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
InitSpec = rl_init rl_builtin;
Statement = InitSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_orLiteral;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_minus Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_gt;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_dollar;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_percent;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_gt;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_dollar;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_percent;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_orLiteral;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_minus Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = Term rl_dot FactorWithAug;
Expression = Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_orLiteral;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_minus Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = Term rl_dot FactorWithAug;
Expression = Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_percent;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_percent;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
AlphabetNum = rl_hex;
RangeLit = AlphabetNum;
AlphabetNum = rl_hex;
RangeLit = AlphabetNum;
Factor = RangeLit rl_doubleDot RangeLit;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_minus Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
AugType = rl_dollar;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
AugType = rl_dollar;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_plus;
FactorWithAug = FactorWithRep;
AugType = rl_percent;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_plus;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_plus;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_gt;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_dollar;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_percent;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_plus;
FactorWithAug = FactorWithRep;
AugType = rl_gt;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_dollar;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_percent;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_dollar;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
AugType = rl_percent;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
Term = FactorWithAug;
Expression = Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
start = FsmSpecList;
0
FsmSpecList = ;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_gt;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_gt;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_percent;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
start = FsmSpecList;
0
FsmSpecList = ;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_gt;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_dollar;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_percent;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_gt;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_dollar;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_percent;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
start = FsmSpecList;
0
FsmSpecList = ;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
AugType = rl_gt;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_percent;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = Term FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_percent;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_gt;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_percent;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
start = FsmSpecList;
0
FsmSpecList = ;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
AlphSpec = rl_alphType rl_word rl_word rl_semi;
Statement = AlphSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
AlphabetNum = rl_hex;
RangeLit = AlphabetNum;
AlphabetNum = rl_hex;
RangeLit = AlphabetNum;
Factor = RangeLit rl_doubleDot RangeLit;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
AlphabetNum = rl_hex;
Factor = AlphabetNum;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
AlphabetNum = rl_hex;
RangeLit = AlphabetNum;
AlphabetNum = rl_hex;
RangeLit = AlphabetNum;
Factor = RangeLit rl_doubleDot RangeLit;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
AugType = rl_colon;
ActionEmbed = rl_builtin;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RangeLit = rl_literal;
RangeLit = rl_literal;
Factor = RangeLit rl_doubleDot RangeLit;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_plus;
FactorWithAug = FactorWithRep;
AugType = rl_dollar;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
AugType = rl_percent;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_dollar;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
AugType = rl_percent;
OptPriorName = ;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
Term = FactorWithAug;
Expression = Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
AugType = rl_percent;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
start = FsmSpecList;
0
FsmSpecList = ;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
AlphSpec = rl_alphType rl_word rl_word rl_semi;
Statement = AlphSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
AlphabetNum = rl_hex;
Factor = AlphabetNum;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
start = FsmSpecList;
0
FsmSpecList = ;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
StatementList = ;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
RegularExpr = ;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
Factor = rl_reLiteralSlash RegularExpr rl_reLiteralSlash;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
RegularExpr = ;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
Factor = rl_reLiteralSlash RegularExpr rl_reLiteralSlash;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
RegularExpr = ;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
Factor = rl_reLiteralSlash RegularExpr rl_reLiteralSlash;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
RegularExpr = ;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprChar = rl_reLiteralChar;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
Factor = rl_reLiteralSlash RegularExpr rl_reLiteralSlash;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
RegularExpr = ;
RegularExprChar = rl_reLiteralChar;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
Factor = rl_reLiteralSlash RegularExpr rl_reLiteralSlash;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
RegularExpr = ;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
Factor = rl_reLiteralSlash RegularExpr rl_reLiteralSlash;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
RegularExpr = ;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprOrChar = rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
Factor = rl_reLiteralSlash RegularExpr rl_reLiteralSlash;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
RegularExpr = ;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprOrChar = rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar rl_reLiteralDash rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpen RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
Factor = rl_reLiteralSlash RegularExpr rl_reLiteralSlash;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
RegularExpr = ;
RegularExprOrData = ;
RegularExprOrChar = rl_reLiteralChar;
RegularExprOrData = RegularExprOrData RegularExprOrChar;
RegularExprChar = rl_reLiteralOpenNeg RegularExprOrData rl_reLiteralClose;
RegularExprItem = RegularExprChar;
RegularExpr = RegularExpr RegularExprItem;
Factor = rl_reLiteralSlash RegularExpr rl_reLiteralSlash;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
OptPriorName = rl_word rl_comma;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
AugType = rl_colon;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_orLiteral;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_minus Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_plus;
FactorWithAug = FactorWithRep;
AugType = rl_dollar;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_minus Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_dollar;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = FactorWithAug;
Expression = Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_orLiteral;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = Term rl_dot FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_percent;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_minus Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
OptPriorName = rl_word rl_comma;
PriorityAugStr = rl_uInt;
PriorityAug = PriorityAugStr;
FactorWithAug = FactorWithAug AugType OptPriorName PriorityAug;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = Term rl_dot FactorWithAug;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_word;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
start = FsmSpecList;
0
FsmSpecList = ;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
ActionSpec = rl_action rl_word rl_builtin;
Statement = ActionSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_orLiteral;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = Term rl_dot FactorWithAug;
Expression = Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_orLiteral;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithRep = FactorWithRep rl_star;
FactorWithAug = FactorWithRep;
AugType = rl_colon;
ActionEmbed = rl_word;
FactorWithAug = FactorWithAug AugType ActionEmbed;
Term = Term rl_dot FactorWithAug;
Expression = Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term rl_dot FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
start = FsmSpecList;
0
FsmSpecList = ;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
RangeLit = rl_literal;
RangeLit = rl_literal;
Factor = RangeLit rl_doubleDot RangeLit;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
RangeLit = rl_literal;
RangeLit = rl_literal;
Factor = RangeLit rl_doubleDot RangeLit;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
RangeLit = rl_literal;
RangeLit = rl_literal;
Factor = RangeLit rl_doubleDot RangeLit;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
RangeLit = rl_literal;
RangeLit = rl_literal;
Factor = RangeLit rl_doubleDot RangeLit;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_open Expression rl_close;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = Term FactorWithAug;
Expression = Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
start = FsmSpecList;
0
FsmSpecList = ;
StatementList = ;
DataSpec = rl_data rl_builtin rl_semi;
Statement = DataSpec;
StatementList = StatementList Statement;
MachineName = rl_word;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
Factor = rl_literal;
FactorWithNeg = Factor;
FactorWithRep = FactorWithNeg;
FactorWithAug = FactorWithRep;
Term = FactorWithAug;
Expression = Expression rl_bar Term;
RLAssignment = MachineName rl_equals Expression rl_semi;
Statement = RLAssignment;
StatementList = StatementList Statement;
FsmSpec = rl_section rl_word StatementList rl_section;
FsmSpecList = FsmSpecList FsmSpec;
start = FsmSpecList;
0
#endif
